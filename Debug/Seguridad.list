
Seguridad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e40  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a97c  0800a97c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a984  0800a984  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a988  0800a988  0001a988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800a98c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000068  0800a9f4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  0800a9f4  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f74a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020d4  00000000  00000000  0002f7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef8  00000000  00000000  000318b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e00  00000000  00000000  000327b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000218a2  00000000  00000000  000335b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be1c  00000000  00000000  00054e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdc26  00000000  00000000  00060c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e894  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004050  00000000  00000000  0012e910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b24 	.word	0x08006b24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08006b24 	.word	0x08006b24

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031a:	f1a4 0401 	sub.w	r4, r4, #1
 800031e:	d1e9      	bne.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <__aeabi_d2f>:
 8000978:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800097c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000980:	bf24      	itt	cs
 8000982:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000986:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098a:	d90d      	bls.n	80009a8 <__aeabi_d2f+0x30>
 800098c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000990:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000994:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000998:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800099c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a0:	bf08      	it	eq
 80009a2:	f020 0001 	biceq.w	r0, r0, #1
 80009a6:	4770      	bx	lr
 80009a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009ac:	d121      	bne.n	80009f2 <__aeabi_d2f+0x7a>
 80009ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b2:	bfbc      	itt	lt
 80009b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b8:	4770      	bxlt	lr
 80009ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c2:	f1c2 0218 	rsb	r2, r2, #24
 80009c6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ce:	fa20 f002 	lsr.w	r0, r0, r2
 80009d2:	bf18      	it	ne
 80009d4:	f040 0001 	orrne.w	r0, r0, #1
 80009d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e4:	ea40 000c 	orr.w	r0, r0, ip
 80009e8:	fa23 f302 	lsr.w	r3, r3, r2
 80009ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f0:	e7cc      	b.n	800098c <__aeabi_d2f+0x14>
 80009f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f6:	d107      	bne.n	8000a08 <__aeabi_d2f+0x90>
 80009f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009fc:	bf1e      	ittt	ne
 80009fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a06:	4770      	bxne	lr
 8000a08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_uldivmod>:
 8000a18:	b953      	cbnz	r3, 8000a30 <__aeabi_uldivmod+0x18>
 8000a1a:	b94a      	cbnz	r2, 8000a30 <__aeabi_uldivmod+0x18>
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	bf08      	it	eq
 8000a20:	2800      	cmpeq	r0, #0
 8000a22:	bf1c      	itt	ne
 8000a24:	f04f 31ff 	movne.w	r1, #4294967295
 8000a28:	f04f 30ff 	movne.w	r0, #4294967295
 8000a2c:	f000 b972 	b.w	8000d14 <__aeabi_idiv0>
 8000a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a38:	f000 f806 	bl	8000a48 <__udivmoddi4>
 8000a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a44:	b004      	add	sp, #16
 8000a46:	4770      	bx	lr

08000a48 <__udivmoddi4>:
 8000a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a4c:	9e08      	ldr	r6, [sp, #32]
 8000a4e:	4604      	mov	r4, r0
 8000a50:	4688      	mov	r8, r1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d14b      	bne.n	8000aee <__udivmoddi4+0xa6>
 8000a56:	428a      	cmp	r2, r1
 8000a58:	4615      	mov	r5, r2
 8000a5a:	d967      	bls.n	8000b2c <__udivmoddi4+0xe4>
 8000a5c:	fab2 f282 	clz	r2, r2
 8000a60:	b14a      	cbz	r2, 8000a76 <__udivmoddi4+0x2e>
 8000a62:	f1c2 0720 	rsb	r7, r2, #32
 8000a66:	fa01 f302 	lsl.w	r3, r1, r2
 8000a6a:	fa20 f707 	lsr.w	r7, r0, r7
 8000a6e:	4095      	lsls	r5, r2
 8000a70:	ea47 0803 	orr.w	r8, r7, r3
 8000a74:	4094      	lsls	r4, r2
 8000a76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a7a:	0c23      	lsrs	r3, r4, #16
 8000a7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a80:	fa1f fc85 	uxth.w	ip, r5
 8000a84:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8c:	fb07 f10c 	mul.w	r1, r7, ip
 8000a90:	4299      	cmp	r1, r3
 8000a92:	d909      	bls.n	8000aa8 <__udivmoddi4+0x60>
 8000a94:	18eb      	adds	r3, r5, r3
 8000a96:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a9a:	f080 811b 	bcs.w	8000cd4 <__udivmoddi4+0x28c>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 8118 	bls.w	8000cd4 <__udivmoddi4+0x28c>
 8000aa4:	3f02      	subs	r7, #2
 8000aa6:	442b      	add	r3, r5
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000abc:	45a4      	cmp	ip, r4
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x8c>
 8000ac0:	192c      	adds	r4, r5, r4
 8000ac2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac6:	f080 8107 	bcs.w	8000cd8 <__udivmoddi4+0x290>
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	f240 8104 	bls.w	8000cd8 <__udivmoddi4+0x290>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	442c      	add	r4, r5
 8000ad4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ad8:	eba4 040c 	sub.w	r4, r4, ip
 8000adc:	2700      	movs	r7, #0
 8000ade:	b11e      	cbz	r6, 8000ae8 <__udivmoddi4+0xa0>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae8:	4639      	mov	r1, r7
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xbe>
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	f000 80eb 	beq.w	8000cce <__udivmoddi4+0x286>
 8000af8:	2700      	movs	r7, #0
 8000afa:	e9c6 0100 	strd	r0, r1, [r6]
 8000afe:	4638      	mov	r0, r7
 8000b00:	4639      	mov	r1, r7
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f783 	clz	r7, r3
 8000b0a:	2f00      	cmp	r7, #0
 8000b0c:	d147      	bne.n	8000b9e <__udivmoddi4+0x156>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd0>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80fa 	bhi.w	8000d0c <__udivmoddi4+0x2c4>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	4698      	mov	r8, r3
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa0>
 8000b26:	e9c6 4800 	strd	r4, r8, [r6]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa0>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xe8>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 808f 	bne.w	8000c58 <__udivmoddi4+0x210>
 8000b3a:	1b49      	subs	r1, r1, r5
 8000b3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b40:	fa1f f885 	uxth.w	r8, r5
 8000b44:	2701      	movs	r7, #1
 8000b46:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b4a:	0c23      	lsrs	r3, r4, #16
 8000b4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b54:	fb08 f10c 	mul.w	r1, r8, ip
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d907      	bls.n	8000b6c <__udivmoddi4+0x124>
 8000b5c:	18eb      	adds	r3, r5, r3
 8000b5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b62:	d202      	bcs.n	8000b6a <__udivmoddi4+0x122>
 8000b64:	4299      	cmp	r1, r3
 8000b66:	f200 80cd 	bhi.w	8000d04 <__udivmoddi4+0x2bc>
 8000b6a:	4684      	mov	ip, r0
 8000b6c:	1a59      	subs	r1, r3, r1
 8000b6e:	b2a3      	uxth	r3, r4
 8000b70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b74:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b7c:	fb08 f800 	mul.w	r8, r8, r0
 8000b80:	45a0      	cmp	r8, r4
 8000b82:	d907      	bls.n	8000b94 <__udivmoddi4+0x14c>
 8000b84:	192c      	adds	r4, r5, r4
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x14a>
 8000b8c:	45a0      	cmp	r8, r4
 8000b8e:	f200 80b6 	bhi.w	8000cfe <__udivmoddi4+0x2b6>
 8000b92:	4618      	mov	r0, r3
 8000b94:	eba4 0408 	sub.w	r4, r4, r8
 8000b98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b9c:	e79f      	b.n	8000ade <__udivmoddi4+0x96>
 8000b9e:	f1c7 0c20 	rsb	ip, r7, #32
 8000ba2:	40bb      	lsls	r3, r7
 8000ba4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ba8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bac:	fa01 f407 	lsl.w	r4, r1, r7
 8000bb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bbc:	4325      	orrs	r5, r4
 8000bbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bc2:	0c2c      	lsrs	r4, r5, #16
 8000bc4:	fb08 3319 	mls	r3, r8, r9, r3
 8000bc8:	fa1f fa8e 	uxth.w	sl, lr
 8000bcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bd0:	fb09 f40a 	mul.w	r4, r9, sl
 8000bd4:	429c      	cmp	r4, r3
 8000bd6:	fa02 f207 	lsl.w	r2, r2, r7
 8000bda:	fa00 f107 	lsl.w	r1, r0, r7
 8000bde:	d90b      	bls.n	8000bf8 <__udivmoddi4+0x1b0>
 8000be0:	eb1e 0303 	adds.w	r3, lr, r3
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be8:	f080 8087 	bcs.w	8000cfa <__udivmoddi4+0x2b2>
 8000bec:	429c      	cmp	r4, r3
 8000bee:	f240 8084 	bls.w	8000cfa <__udivmoddi4+0x2b2>
 8000bf2:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf6:	4473      	add	r3, lr
 8000bf8:	1b1b      	subs	r3, r3, r4
 8000bfa:	b2ad      	uxth	r5, r5
 8000bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c00:	fb08 3310 	mls	r3, r8, r0, r3
 8000c04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c08:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c0c:	45a2      	cmp	sl, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x1da>
 8000c10:	eb1e 0404 	adds.w	r4, lr, r4
 8000c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c18:	d26b      	bcs.n	8000cf2 <__udivmoddi4+0x2aa>
 8000c1a:	45a2      	cmp	sl, r4
 8000c1c:	d969      	bls.n	8000cf2 <__udivmoddi4+0x2aa>
 8000c1e:	3802      	subs	r0, #2
 8000c20:	4474      	add	r4, lr
 8000c22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	eba4 040a 	sub.w	r4, r4, sl
 8000c2e:	454c      	cmp	r4, r9
 8000c30:	46c2      	mov	sl, r8
 8000c32:	464b      	mov	r3, r9
 8000c34:	d354      	bcc.n	8000ce0 <__udivmoddi4+0x298>
 8000c36:	d051      	beq.n	8000cdc <__udivmoddi4+0x294>
 8000c38:	2e00      	cmp	r6, #0
 8000c3a:	d069      	beq.n	8000d10 <__udivmoddi4+0x2c8>
 8000c3c:	ebb1 050a 	subs.w	r5, r1, sl
 8000c40:	eb64 0403 	sbc.w	r4, r4, r3
 8000c44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c48:	40fd      	lsrs	r5, r7
 8000c4a:	40fc      	lsrs	r4, r7
 8000c4c:	ea4c 0505 	orr.w	r5, ip, r5
 8000c50:	e9c6 5400 	strd	r5, r4, [r6]
 8000c54:	2700      	movs	r7, #0
 8000c56:	e747      	b.n	8000ae8 <__udivmoddi4+0xa0>
 8000c58:	f1c2 0320 	rsb	r3, r2, #32
 8000c5c:	fa20 f703 	lsr.w	r7, r0, r3
 8000c60:	4095      	lsls	r5, r2
 8000c62:	fa01 f002 	lsl.w	r0, r1, r2
 8000c66:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6e:	4338      	orrs	r0, r7
 8000c70:	0c01      	lsrs	r1, r0, #16
 8000c72:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c76:	fa1f f885 	uxth.w	r8, r5
 8000c7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c82:	fb07 f308 	mul.w	r3, r7, r8
 8000c86:	428b      	cmp	r3, r1
 8000c88:	fa04 f402 	lsl.w	r4, r4, r2
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x256>
 8000c8e:	1869      	adds	r1, r5, r1
 8000c90:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c94:	d22f      	bcs.n	8000cf6 <__udivmoddi4+0x2ae>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d92d      	bls.n	8000cf6 <__udivmoddi4+0x2ae>
 8000c9a:	3f02      	subs	r7, #2
 8000c9c:	4429      	add	r1, r5
 8000c9e:	1acb      	subs	r3, r1, r3
 8000ca0:	b281      	uxth	r1, r0
 8000ca2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cae:	fb00 f308 	mul.w	r3, r0, r8
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d907      	bls.n	8000cc6 <__udivmoddi4+0x27e>
 8000cb6:	1869      	adds	r1, r5, r1
 8000cb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cbc:	d217      	bcs.n	8000cee <__udivmoddi4+0x2a6>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d915      	bls.n	8000cee <__udivmoddi4+0x2a6>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4429      	add	r1, r5
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ccc:	e73b      	b.n	8000b46 <__udivmoddi4+0xfe>
 8000cce:	4637      	mov	r7, r6
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	e709      	b.n	8000ae8 <__udivmoddi4+0xa0>
 8000cd4:	4607      	mov	r7, r0
 8000cd6:	e6e7      	b.n	8000aa8 <__udivmoddi4+0x60>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6fb      	b.n	8000ad4 <__udivmoddi4+0x8c>
 8000cdc:	4541      	cmp	r1, r8
 8000cde:	d2ab      	bcs.n	8000c38 <__udivmoddi4+0x1f0>
 8000ce0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ce4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ce8:	3801      	subs	r0, #1
 8000cea:	4613      	mov	r3, r2
 8000cec:	e7a4      	b.n	8000c38 <__udivmoddi4+0x1f0>
 8000cee:	4660      	mov	r0, ip
 8000cf0:	e7e9      	b.n	8000cc6 <__udivmoddi4+0x27e>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	e795      	b.n	8000c22 <__udivmoddi4+0x1da>
 8000cf6:	4667      	mov	r7, ip
 8000cf8:	e7d1      	b.n	8000c9e <__udivmoddi4+0x256>
 8000cfa:	4681      	mov	r9, r0
 8000cfc:	e77c      	b.n	8000bf8 <__udivmoddi4+0x1b0>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	442c      	add	r4, r5
 8000d02:	e747      	b.n	8000b94 <__udivmoddi4+0x14c>
 8000d04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d08:	442b      	add	r3, r5
 8000d0a:	e72f      	b.n	8000b6c <__udivmoddi4+0x124>
 8000d0c:	4638      	mov	r0, r7
 8000d0e:	e708      	b.n	8000b22 <__udivmoddi4+0xda>
 8000d10:	4637      	mov	r7, r6
 8000d12:	e6e9      	b.n	8000ae8 <__udivmoddi4+0xa0>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <Keypad4x4_Init>:
};

//***** Functions definition *****//
//Function(1): Set Keypad pins and ports
void Keypad4x4_Init(Keypad_WiresTypeDef  *KeypadWiringStruct)
{
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	//Step(1): Copy the Keypad wirings to the library
	KeypadStruct = *KeypadWiringStruct;
 8000d20:	4a32      	ldr	r2, [pc, #200]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4614      	mov	r4, r2
 8000d26:	461d      	mov	r5, r3
 8000d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Step(2): Find the positions of the 4 OUT pins
	Keypad4x4_FindPins_positions();
 8000d38:	f000 f85c 	bl	8000df4 <Keypad4x4_FindPins_positions>
	//Step(3): Initialise all pins to set all OUT pins to RESET
	KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	6859      	ldr	r1, [r3, #4]
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <Keypad4x4_Init+0xd8>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	2301      	movs	r3, #1
 8000d4a:	fa03 f202 	lsl.w	r2, r3, r2
 8000d4e:	4b27      	ldr	r3, [pc, #156]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	6859      	ldr	r1, [r3, #4]
 8000d5c:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <Keypad4x4_Init+0xd8>)
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	461a      	mov	r2, r3
 8000d62:	2301      	movs	r3, #1
 8000d64:	fa03 f202 	lsl.w	r2, r3, r2
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	6859      	ldr	r1, [r3, #4]
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <Keypad4x4_Init+0xd8>)
 8000d78:	789b      	ldrb	r3, [r3, #2]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	fa03 f202 	lsl.w	r2, r3, r2
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	6859      	ldr	r1, [r3, #4]
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <Keypad4x4_Init+0xd8>)
 8000d92:	78db      	ldrb	r3, [r3, #3]
 8000d94:	461a      	mov	r2, r3
 8000d96:	2301      	movs	r3, #1
 8000d98:	fa03 f202 	lsl.w	r2, r3, r2
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, GPIO_PIN_SET);
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000da6:	6918      	ldr	r0, [r3, #16]
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dac:	2201      	movs	r2, #1
 8000dae:	4619      	mov	r1, r3
 8000db0:	f003 fb94 	bl	80044dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, GPIO_PIN_SET);
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000db6:	6958      	ldr	r0, [r3, #20]
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f003 fb8c 	bl	80044dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, GPIO_PIN_SET);
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000dc6:	6998      	ldr	r0, [r3, #24]
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000dca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f003 fb84 	bl	80044dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, GPIO_PIN_SET);
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000dd6:	69d8      	ldr	r0, [r3, #28]
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <Keypad4x4_Init+0xd4>)
 8000dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4619      	mov	r1, r3
 8000de0:	f003 fb7c 	bl	80044dc <HAL_GPIO_WritePin>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bdb0      	pop	{r4, r5, r7, pc}
 8000dec:	20000084 	.word	0x20000084
 8000df0:	200000b4 	.word	0x200000b4

08000df4 <Keypad4x4_FindPins_positions>:
//Function(2): Get pin positions for colomn change use, only for out pins
void Keypad4x4_FindPins_positions(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	uint8_t idx=0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	for(idx=0; idx<16; idx++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e036      	b.n	8000e72 <Keypad4x4_FindPins_positions+0x7e>
	{
		if(((KeypadStruct.OUT0pin>>idx)&0x0001) == 0x0001)
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <Keypad4x4_FindPins_positions+0x90>)
 8000e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e08:	461a      	mov	r2, r3
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	fa42 f303 	asr.w	r3, r2, r3
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <Keypad4x4_FindPins_positions+0x2a>
		{
			OutPositions[0] = idx;
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <Keypad4x4_FindPins_positions+0x94>)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	7013      	strb	r3, [r2, #0]
		}
		if(((KeypadStruct.OUT1pin>>idx)&0x0001) == 0x0001)
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <Keypad4x4_FindPins_positions+0x90>)
 8000e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e22:	461a      	mov	r2, r3
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	fa42 f303 	asr.w	r3, r2, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <Keypad4x4_FindPins_positions+0x44>
		{
			OutPositions[1] = idx;
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <Keypad4x4_FindPins_positions+0x94>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	7053      	strb	r3, [r2, #1]
		}
		if(((KeypadStruct.OUT2pin>>idx)&0x0001) == 0x0001)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <Keypad4x4_FindPins_positions+0x90>)
 8000e3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	fa42 f303 	asr.w	r3, r2, r3
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <Keypad4x4_FindPins_positions+0x5e>
		{
			OutPositions[2] = idx;
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <Keypad4x4_FindPins_positions+0x94>)
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	7093      	strb	r3, [r2, #2]
		}
		if(((KeypadStruct.OUT3pin>>idx)&0x0001) == 0x0001)
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <Keypad4x4_FindPins_positions+0x90>)
 8000e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000e56:	461a      	mov	r2, r3
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	fa42 f303 	asr.w	r3, r2, r3
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <Keypad4x4_FindPins_positions+0x78>
		{
			OutPositions[3] = idx;
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <Keypad4x4_FindPins_positions+0x94>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	70d3      	strb	r3, [r2, #3]
	for(idx=0; idx<16; idx++)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d9c5      	bls.n	8000e04 <Keypad4x4_FindPins_positions+0x10>
		}
	}
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	20000084 	.word	0x20000084
 8000e88:	200000b4 	.word	0x200000b4

08000e8c <Keypad4x4_ChangeColomn>:
//Function(3): Change colomn number
void Keypad4x4_ChangeColomn(uint8_t colNum_0_to_3)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
	if(colNum_0_to_3==0)
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d134      	bne.n	8000f06 <Keypad4x4_ChangeColomn+0x7a>
	{
		//Set selected colomn
		KeypadStruct.OUT0_Port->OTYPER &= ~(1UL << OutPositions[0]);
 8000e9c:	4b70      	ldr	r3, [pc, #448]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	6859      	ldr	r1, [r3, #4]
 8000ea2:	4b70      	ldr	r3, [pc, #448]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4093      	lsls	r3, r2
 8000eac:	43da      	mvns	r2, r3
 8000eae:	4b6c      	ldr	r3, [pc, #432]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	400a      	ands	r2, r1
 8000eb4:	605a      	str	r2, [r3, #4]

		//Make other colomns floating
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000eb6:	4b6a      	ldr	r3, [pc, #424]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	6859      	ldr	r1, [r3, #4]
 8000ebc:	4b69      	ldr	r3, [pc, #420]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000ebe:	785b      	ldrb	r3, [r3, #1]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	fa03 f202 	lsl.w	r2, r3, r2
 8000ec8:	4b65      	ldr	r3, [pc, #404]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 8000ed0:	4b63      	ldr	r3, [pc, #396]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	6859      	ldr	r1, [r3, #4]
 8000ed6:	4b63      	ldr	r3, [pc, #396]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000ed8:	789b      	ldrb	r3, [r3, #2]
 8000eda:	461a      	mov	r2, r3
 8000edc:	2301      	movs	r3, #1
 8000ede:	fa03 f202 	lsl.w	r2, r3, r2
 8000ee2:	4b5f      	ldr	r3, [pc, #380]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000eea:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	6859      	ldr	r1, [r3, #4]
 8000ef0:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000ef2:	78db      	ldrb	r3, [r3, #3]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	fa03 f202 	lsl.w	r2, r3, r2
 8000efc:	4b58      	ldr	r3, [pc, #352]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	605a      	str	r2, [r3, #4]
		//Make other colomns floating
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
	}
}
 8000f04:	e0a6      	b.n	8001054 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==1)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d134      	bne.n	8000f76 <Keypad4x4_ChangeColomn+0xea>
		KeypadStruct.OUT1_Port->OTYPER &= ~(1UL << OutPositions[1]);
 8000f0c:	4b54      	ldr	r3, [pc, #336]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	4b54      	ldr	r3, [pc, #336]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f14:	785b      	ldrb	r3, [r3, #1]
 8000f16:	461a      	mov	r2, r3
 8000f18:	2301      	movs	r3, #1
 8000f1a:	4093      	lsls	r3, r2
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	4b50      	ldr	r3, [pc, #320]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	400a      	ands	r2, r1
 8000f24:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000f26:	4b4e      	ldr	r3, [pc, #312]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	6859      	ldr	r1, [r3, #4]
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	2301      	movs	r3, #1
 8000f34:	fa03 f202 	lsl.w	r2, r3, r2
 8000f38:	4b49      	ldr	r3, [pc, #292]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 8000f40:	4b47      	ldr	r3, [pc, #284]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	6859      	ldr	r1, [r3, #4]
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f48:	789b      	ldrb	r3, [r3, #2]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	fa03 f202 	lsl.w	r2, r3, r2
 8000f52:	4b43      	ldr	r3, [pc, #268]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000f5a:	4b41      	ldr	r3, [pc, #260]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	6859      	ldr	r1, [r3, #4]
 8000f60:	4b40      	ldr	r3, [pc, #256]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f62:	78db      	ldrb	r3, [r3, #3]
 8000f64:	461a      	mov	r2, r3
 8000f66:	2301      	movs	r3, #1
 8000f68:	fa03 f202 	lsl.w	r2, r3, r2
 8000f6c:	4b3c      	ldr	r3, [pc, #240]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	605a      	str	r2, [r3, #4]
}
 8000f74:	e06e      	b.n	8001054 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==2)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d134      	bne.n	8000fe6 <Keypad4x4_ChangeColomn+0x15a>
		KeypadStruct.OUT2_Port->OTYPER &= ~(1UL << OutPositions[2]);
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	6859      	ldr	r1, [r3, #4]
 8000f82:	4b38      	ldr	r3, [pc, #224]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f84:	789b      	ldrb	r3, [r3, #2]
 8000f86:	461a      	mov	r2, r3
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	400a      	ands	r2, r1
 8000f94:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000f96:	4b32      	ldr	r3, [pc, #200]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	6859      	ldr	r1, [r3, #4]
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	fa03 f202 	lsl.w	r2, r3, r2
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	6859      	ldr	r1, [r3, #4]
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000fb8:	785b      	ldrb	r3, [r3, #1]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	fa03 f202 	lsl.w	r2, r3, r2
 8000fc2:	4b27      	ldr	r3, [pc, #156]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	6859      	ldr	r1, [r3, #4]
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000fd2:	78db      	ldrb	r3, [r3, #3]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	fa03 f202 	lsl.w	r2, r3, r2
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	605a      	str	r2, [r3, #4]
}
 8000fe4:	e036      	b.n	8001054 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==3)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d133      	bne.n	8001054 <Keypad4x4_ChangeColomn+0x1c8>
		KeypadStruct.OUT3_Port->OTYPER &= ~(1UL << OutPositions[3]);
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	6859      	ldr	r1, [r3, #4]
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8000ff4:	78db      	ldrb	r3, [r3, #3]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	43da      	mvns	r2, r3
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	400a      	ands	r2, r1
 8001004:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	6859      	ldr	r1, [r3, #4]
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	2301      	movs	r3, #1
 8001014:	fa03 f202 	lsl.w	r2, r3, r2
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	430a      	orrs	r2, r1
 800101e:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	6859      	ldr	r1, [r3, #4]
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	461a      	mov	r2, r3
 800102c:	2301      	movs	r3, #1
 800102e:	fa03 f202 	lsl.w	r2, r3, r2
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	430a      	orrs	r2, r1
 8001038:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	6859      	ldr	r1, [r3, #4]
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <Keypad4x4_ChangeColomn+0x1d8>)
 8001042:	789b      	ldrb	r3, [r3, #2]
 8001044:	461a      	mov	r2, r3
 8001046:	2301      	movs	r3, #1
 8001048:	fa03 f202 	lsl.w	r2, r3, r2
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <Keypad4x4_ChangeColomn+0x1d4>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	430a      	orrs	r2, r1
 8001052:	605a      	str	r2, [r3, #4]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	20000084 	.word	0x20000084
 8001064:	200000b4 	.word	0x200000b4

08001068 <Keypad4x4_ReadKeypad>:

//Function(4): Read active keypad button
void Keypad4x4_ReadKeypad(bool keys[16])
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	//Step(1): Make Col0 High and check the rows
	Keypad4x4_ChangeColomn(0);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ff0b 	bl	8000e8c <Keypad4x4_ChangeColomn>
	keys[0] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 8001076:	4b95      	ldr	r3, [pc, #596]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b94      	ldr	r3, [pc, #592]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800107c:	8c1b      	ldrh	r3, [r3, #32]
 800107e:	4619      	mov	r1, r3
 8001080:	4610      	mov	r0, r2
 8001082:	f003 fa13 	bl	80044ac <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf14      	ite	ne
 800108c:	2301      	movne	r3, #1
 800108e:	2300      	moveq	r3, #0
 8001090:	b2da      	uxtb	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	701a      	strb	r2, [r3, #0]
	keys[4] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 8001096:	4b8d      	ldr	r3, [pc, #564]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	4b8c      	ldr	r3, [pc, #560]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800109c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800109e:	4619      	mov	r1, r3
 80010a0:	4610      	mov	r0, r2
 80010a2:	f003 fa03 	bl	80044ac <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	bf14      	ite	ne
 80010b2:	2201      	movne	r2, #1
 80010b4:	2200      	moveq	r2, #0
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
	keys[8] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 80010ba:	4b84      	ldr	r3, [pc, #528]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80010c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f003 f9f1 	bl	80044ac <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3308      	adds	r3, #8
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	bf14      	ite	ne
 80010d6:	2201      	movne	r2, #1
 80010d8:	2200      	moveq	r2, #0
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	701a      	strb	r2, [r3, #0]
	keys[12] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 80010de:	4b7b      	ldr	r3, [pc, #492]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80010e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80010e6:	4619      	mov	r1, r3
 80010e8:	4610      	mov	r0, r2
 80010ea:	f003 f9df 	bl	80044ac <HAL_GPIO_ReadPin>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	330c      	adds	r3, #12
 80010f6:	2a00      	cmp	r2, #0
 80010f8:	bf14      	ite	ne
 80010fa:	2201      	movne	r2, #1
 80010fc:	2200      	moveq	r2, #0
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]

	//Step(2): Make Col1 High and check the rows
	Keypad4x4_ChangeColomn(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff fec2 	bl	8000e8c <Keypad4x4_ChangeColomn>
	keys[1] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 8001108:	4b70      	ldr	r3, [pc, #448]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b6f      	ldr	r3, [pc, #444]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800110e:	8c1b      	ldrh	r3, [r3, #32]
 8001110:	4619      	mov	r1, r3
 8001112:	4610      	mov	r0, r2
 8001114:	f003 f9ca 	bl	80044ac <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3301      	adds	r3, #1
 8001120:	2a00      	cmp	r2, #0
 8001122:	bf14      	ite	ne
 8001124:	2201      	movne	r2, #1
 8001126:	2200      	moveq	r2, #0
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	701a      	strb	r2, [r3, #0]
	keys[5] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 800112c:	4b67      	ldr	r3, [pc, #412]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4b66      	ldr	r3, [pc, #408]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 8001132:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001134:	4619      	mov	r1, r3
 8001136:	4610      	mov	r0, r2
 8001138:	f003 f9b8 	bl	80044ac <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3305      	adds	r3, #5
 8001144:	2a00      	cmp	r2, #0
 8001146:	bf14      	ite	ne
 8001148:	2201      	movne	r2, #1
 800114a:	2200      	moveq	r2, #0
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
	keys[9] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 8001150:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	4b5d      	ldr	r3, [pc, #372]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 8001156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4610      	mov	r0, r2
 800115c:	f003 f9a6 	bl	80044ac <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3309      	adds	r3, #9
 8001168:	2a00      	cmp	r2, #0
 800116a:	bf14      	ite	ne
 800116c:	2201      	movne	r2, #1
 800116e:	2200      	moveq	r2, #0
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
	keys[13] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800117a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800117c:	4619      	mov	r1, r3
 800117e:	4610      	mov	r0, r2
 8001180:	f003 f994 	bl	80044ac <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	330d      	adds	r3, #13
 800118c:	2a00      	cmp	r2, #0
 800118e:	bf14      	ite	ne
 8001190:	2201      	movne	r2, #1
 8001192:	2200      	moveq	r2, #0
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	701a      	strb	r2, [r3, #0]

	//Step(3): Make Col2 High and check the rows
	Keypad4x4_ChangeColomn(2);
 8001198:	2002      	movs	r0, #2
 800119a:	f7ff fe77 	bl	8000e8c <Keypad4x4_ChangeColomn>
	keys[2] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 800119e:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b4a      	ldr	r3, [pc, #296]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80011a4:	8c1b      	ldrh	r3, [r3, #32]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f003 f97f 	bl	80044ac <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3302      	adds	r3, #2
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2201      	movne	r2, #1
 80011bc:	2200      	moveq	r2, #0
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
	keys[6] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 80011c2:	4b42      	ldr	r3, [pc, #264]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80011c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f003 f96d 	bl	80044ac <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3306      	adds	r3, #6
 80011da:	2a00      	cmp	r2, #0
 80011dc:	bf14      	ite	ne
 80011de:	2201      	movne	r2, #1
 80011e0:	2200      	moveq	r2, #0
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]
	keys[10] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	4b38      	ldr	r3, [pc, #224]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80011ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4610      	mov	r0, r2
 80011f2:	f003 f95b 	bl	80044ac <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	330a      	adds	r3, #10
 80011fe:	2a00      	cmp	r2, #0
 8001200:	bf14      	ite	ne
 8001202:	2201      	movne	r2, #1
 8001204:	2200      	moveq	r2, #0
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
	keys[14] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 8001210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f003 f949 	bl	80044ac <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	330e      	adds	r3, #14
 8001222:	2a00      	cmp	r2, #0
 8001224:	bf14      	ite	ne
 8001226:	2201      	movne	r2, #1
 8001228:	2200      	moveq	r2, #0
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]

	//Step(4): Make Col3 High and check the rows
	Keypad4x4_ChangeColomn(3);
 800122e:	2003      	movs	r0, #3
 8001230:	f7ff fe2c 	bl	8000e8c <Keypad4x4_ChangeColomn>
	keys[3] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800123a:	8c1b      	ldrh	r3, [r3, #32]
 800123c:	4619      	mov	r1, r3
 800123e:	4610      	mov	r0, r2
 8001240:	f003 f934 	bl	80044ac <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3303      	adds	r3, #3
 800124c:	2a00      	cmp	r2, #0
 800124e:	bf14      	ite	ne
 8001250:	2201      	movne	r2, #1
 8001252:	2200      	moveq	r2, #0
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	701a      	strb	r2, [r3, #0]
	keys[7] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800125e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001260:	4619      	mov	r1, r3
 8001262:	4610      	mov	r0, r2
 8001264:	f003 f922 	bl	80044ac <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3307      	adds	r3, #7
 8001270:	2a00      	cmp	r2, #0
 8001272:	bf14      	ite	ne
 8001274:	2201      	movne	r2, #1
 8001276:	2200      	moveq	r2, #0
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	701a      	strb	r2, [r3, #0]
	keys[11] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 8001282:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4610      	mov	r0, r2
 8001288:	f003 f910 	bl	80044ac <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	330b      	adds	r3, #11
 8001294:	2a00      	cmp	r2, #0
 8001296:	bf14      	ite	ne
 8001298:	2201      	movne	r2, #1
 800129a:	2200      	moveq	r2, #0
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	701a      	strb	r2, [r3, #0]
	keys[15] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <Keypad4x4_ReadKeypad+0x264>)
 80012a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012a8:	4619      	mov	r1, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	f003 f8fe 	bl	80044ac <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	330f      	adds	r3, #15
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	bf14      	ite	ne
 80012bc:	2201      	movne	r2, #1
 80012be:	2200      	moveq	r2, #0
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000084 	.word	0x20000084

080012d0 <Keypad4x4_GetChar>:
//Function(5): Get character
char* Keypad4x4_GetChar(uint8_t keypadSw)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	return Keypad_keys[keypadSw];
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <Keypad4x4_GetChar+0x20>)
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000000 	.word	0x20000000

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fa:	f001 fce1 	bl	8002cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fe:	f000 fa8f 	bl	8001820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001302:	f000 fccd 	bl	8001ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001306:	f000 fcab 	bl	8001c60 <MX_DMA_Init>
  MX_ADC1_Init();
 800130a:	f000 faf3 	bl	80018f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800130e:	f000 fb43 	bl	8001998 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001312:	f000 fb6f 	bl	80019f4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001316:	f000 fc2d 	bl	8001b74 <MX_TIM4_Init>
  MX_TIM3_Init();
 800131a:	f000 fbbb 	bl	8001a94 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // INICIALIZA PANTALLAS
  check1 = ssd1306_Init(&hi2c1);	// INICIALIZA PANTALLA DE INFORMACION
 800131e:	4879      	ldr	r0, [pc, #484]	; (8001504 <main+0x210>)
 8001320:	f000 ff98 	bl	8002254 <ssd1306_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b77      	ldr	r3, [pc, #476]	; (8001508 <main+0x214>)
 800132a:	701a      	strb	r2, [r3, #0]
  ssd1306_Fill(0);          		// 0 NEGRO
 800132c:	2000      	movs	r0, #0
 800132e:	f001 f8b1 	bl	8002494 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);     // IMPRIME LOS CAMBIOS
 8001332:	4874      	ldr	r0, [pc, #464]	; (8001504 <main+0x210>)
 8001334:	f001 f8d0 	bl	80024d8 <ssd1306_UpdateScreen>
  HAL_Delay(100);
 8001338:	2064      	movs	r0, #100	; 0x64
 800133a:	f001 fd33 	bl	8002da4 <HAL_Delay>

  // LECTURA DATOS IR
  HAL_ADC_Start_DMA(&hadc1, &ADC_value_ir, 1);
 800133e:	2201      	movs	r2, #1
 8001340:	4972      	ldr	r1, [pc, #456]	; (800150c <main+0x218>)
 8001342:	4873      	ldr	r0, [pc, #460]	; (8001510 <main+0x21c>)
 8001344:	f001 fed4 	bl	80030f0 <HAL_ADC_Start_DMA>

  // SALIDAS DIRECCION MOTOR
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4871      	ldr	r0, [pc, #452]	; (8001514 <main+0x220>)
 800134e:	f003 f8c5 	bl	80044dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001358:	486e      	ldr	r0, [pc, #440]	; (8001514 <main+0x220>)
 800135a:	f003 f8bf 	bl	80044dc <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim4);
 800135e:	486e      	ldr	r0, [pc, #440]	; (8001518 <main+0x224>)
 8001360:	f004 f9b7 	bl	80056d2 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);  // PWM PARA MOTOR TEMPORIZADOR 4 CHANNEL 1*/
 8001364:	2100      	movs	r1, #0
 8001366:	486c      	ldr	r0, [pc, #432]	; (8001518 <main+0x224>)
 8001368:	f004 fa0c 	bl	8005784 <HAL_TIM_PWM_Start>

  // INICIALIZACION CODIGO
  keypadStruct.IN0_Port = GPIOD;
 800136c:	4b6b      	ldr	r3, [pc, #428]	; (800151c <main+0x228>)
 800136e:	4a6c      	ldr	r2, [pc, #432]	; (8001520 <main+0x22c>)
 8001370:	601a      	str	r2, [r3, #0]
  keypadStruct.IN1_Port = GPIOD;
 8001372:	4b6a      	ldr	r3, [pc, #424]	; (800151c <main+0x228>)
 8001374:	4a6a      	ldr	r2, [pc, #424]	; (8001520 <main+0x22c>)
 8001376:	605a      	str	r2, [r3, #4]
  keypadStruct.IN2_Port = GPIOD;
 8001378:	4b68      	ldr	r3, [pc, #416]	; (800151c <main+0x228>)
 800137a:	4a69      	ldr	r2, [pc, #420]	; (8001520 <main+0x22c>)
 800137c:	609a      	str	r2, [r3, #8]
  keypadStruct.IN3_Port = GPIOD;
 800137e:	4b67      	ldr	r3, [pc, #412]	; (800151c <main+0x228>)
 8001380:	4a67      	ldr	r2, [pc, #412]	; (8001520 <main+0x22c>)
 8001382:	60da      	str	r2, [r3, #12]

  keypadStruct.OUT0_Port = GPIOD;
 8001384:	4b65      	ldr	r3, [pc, #404]	; (800151c <main+0x228>)
 8001386:	4a66      	ldr	r2, [pc, #408]	; (8001520 <main+0x22c>)
 8001388:	611a      	str	r2, [r3, #16]
  keypadStruct.OUT1_Port = GPIOD;
 800138a:	4b64      	ldr	r3, [pc, #400]	; (800151c <main+0x228>)
 800138c:	4a64      	ldr	r2, [pc, #400]	; (8001520 <main+0x22c>)
 800138e:	615a      	str	r2, [r3, #20]
  keypadStruct.OUT2_Port = GPIOD;
 8001390:	4b62      	ldr	r3, [pc, #392]	; (800151c <main+0x228>)
 8001392:	4a63      	ldr	r2, [pc, #396]	; (8001520 <main+0x22c>)
 8001394:	619a      	str	r2, [r3, #24]
  keypadStruct.OUT3_Port = GPIOD;
 8001396:	4b61      	ldr	r3, [pc, #388]	; (800151c <main+0x228>)
 8001398:	4a61      	ldr	r2, [pc, #388]	; (8001520 <main+0x22c>)
 800139a:	61da      	str	r2, [r3, #28]

  keypadStruct.IN0pin = GPIO_PIN_7;
 800139c:	4b5f      	ldr	r3, [pc, #380]	; (800151c <main+0x228>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	841a      	strh	r2, [r3, #32]
  keypadStruct.IN1pin = GPIO_PIN_6;
 80013a2:	4b5e      	ldr	r3, [pc, #376]	; (800151c <main+0x228>)
 80013a4:	2240      	movs	r2, #64	; 0x40
 80013a6:	845a      	strh	r2, [r3, #34]	; 0x22
  keypadStruct.IN2pin = GPIO_PIN_5;
 80013a8:	4b5c      	ldr	r3, [pc, #368]	; (800151c <main+0x228>)
 80013aa:	2220      	movs	r2, #32
 80013ac:	849a      	strh	r2, [r3, #36]	; 0x24
  keypadStruct.IN3pin = GPIO_PIN_4;
 80013ae:	4b5b      	ldr	r3, [pc, #364]	; (800151c <main+0x228>)
 80013b0:	2210      	movs	r2, #16
 80013b2:	84da      	strh	r2, [r3, #38]	; 0x26

  keypadStruct.OUT0pin = GPIO_PIN_3;
 80013b4:	4b59      	ldr	r3, [pc, #356]	; (800151c <main+0x228>)
 80013b6:	2208      	movs	r2, #8
 80013b8:	851a      	strh	r2, [r3, #40]	; 0x28
  keypadStruct.OUT1pin = GPIO_PIN_2;
 80013ba:	4b58      	ldr	r3, [pc, #352]	; (800151c <main+0x228>)
 80013bc:	2204      	movs	r2, #4
 80013be:	855a      	strh	r2, [r3, #42]	; 0x2a
  keypadStruct.OUT2pin = GPIO_PIN_1;
 80013c0:	4b56      	ldr	r3, [pc, #344]	; (800151c <main+0x228>)
 80013c2:	2202      	movs	r2, #2
 80013c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  keypadStruct.OUT3pin = GPIO_PIN_0;
 80013c6:	4b55      	ldr	r3, [pc, #340]	; (800151c <main+0x228>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  Keypad4x4_Init(&keypadStruct);
 80013cc:	4853      	ldr	r0, [pc, #332]	; (800151c <main+0x228>)
 80013ce:	f7ff fca3 	bl	8000d18 <Keypad4x4_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(boton == 0 && puerta == 0)
 80013d2:	4b54      	ldr	r3, [pc, #336]	; (8001524 <main+0x230>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d105      	bne.n	80013e6 <main+0xf2>
 80013da:	4b53      	ldr	r3, [pc, #332]	; (8001528 <main+0x234>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <main+0xf2>
	  {
		  animacion_ojos();	// LLAMA FUNCION QUE IMPRIME LA ANIMACION PARALIZA EL MICRO DURANTE TODA LA ANIMACION
 80013e2:	f000 fe0f 	bl	8002004 <animacion_ojos>
	  }

      // CONTRASEÑA
	 if (contrasena_bit == 0 && puerta == 0 && boton == 1)
 80013e6:	4b51      	ldr	r3, [pc, #324]	; (800152c <main+0x238>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 80df 	bne.w	80015ae <main+0x2ba>
 80013f0:	4b4d      	ldr	r3, [pc, #308]	; (8001528 <main+0x234>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f040 80da 	bne.w	80015ae <main+0x2ba>
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <main+0x230>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	f040 80d5 	bne.w	80015ae <main+0x2ba>
	  {
		  ssd1306_Fill(0);          		// 0 NEGRO
 8001404:	2000      	movs	r0, #0
 8001406:	f001 f845 	bl	8002494 <ssd1306_Fill>
		  ssd1306_SetCursor( 12, 5 );
 800140a:	2105      	movs	r1, #5
 800140c:	200c      	movs	r0, #12
 800140e:	f001 f99b 	bl	8002748 <ssd1306_SetCursor>
		  ssd1306_WriteString("INTRODUZCA", Font_11x18, 1);
 8001412:	4a47      	ldr	r2, [pc, #284]	; (8001530 <main+0x23c>)
 8001414:	2301      	movs	r3, #1
 8001416:	ca06      	ldmia	r2, {r1, r2}
 8001418:	4846      	ldr	r0, [pc, #280]	; (8001534 <main+0x240>)
 800141a:	f001 f96f 	bl	80026fc <ssd1306_WriteString>
		  ssd1306_SetCursor( 12, 20 );
 800141e:	2114      	movs	r1, #20
 8001420:	200c      	movs	r0, #12
 8001422:	f001 f991 	bl	8002748 <ssd1306_SetCursor>
		  ssd1306_WriteString("CODIGO", Font_11x18, 1);
 8001426:	4a42      	ldr	r2, [pc, #264]	; (8001530 <main+0x23c>)
 8001428:	2301      	movs	r3, #1
 800142a:	ca06      	ldmia	r2, {r1, r2}
 800142c:	4842      	ldr	r0, [pc, #264]	; (8001538 <main+0x244>)
 800142e:	f001 f965 	bl	80026fc <ssd1306_WriteString>
		  ssd1306_UpdateScreen(&hi2c1);
 8001432:	4834      	ldr	r0, [pc, #208]	; (8001504 <main+0x210>)
 8001434:	f001 f850 	bl	80024d8 <ssd1306_UpdateScreen>
			  }

		  }while(contrasena_bit != 1);*/

		  do{
			  Keypad4x4_ReadKeypad(botones_pad);
 8001438:	4840      	ldr	r0, [pc, #256]	; (800153c <main+0x248>)
 800143a:	f7ff fe15 	bl	8001068 <Keypad4x4_ReadKeypad>
			  for(uint8_t j=0; j<16; j++)
 800143e:	2300      	movs	r3, #0
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	e0a5      	b.n	8001590 <main+0x29c>
			  {
		  		  		  if(botones_pad[j])
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4a3d      	ldr	r2, [pc, #244]	; (800153c <main+0x248>)
 8001448:	5cd3      	ldrb	r3, [r2, r3]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 809d 	beq.w	800158a <main+0x296>
		  		  		  {
		  		  			  if(strcmp(contrasena[i],Keypad4x4_GetChar(j))/*contrasena[i] != Keypad4x4_GetChar(j)*/)
 8001450:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <main+0x24c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a3b      	ldr	r2, [pc, #236]	; (8001544 <main+0x250>)
 8001456:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff37 	bl	80012d0 <Keypad4x4_GetChar>
 8001462:	4603      	mov	r3, r0
 8001464:	4619      	mov	r1, r3
 8001466:	4620      	mov	r0, r4
 8001468:	f7fe feae 	bl	80001c8 <strcmp>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d06c      	beq.n	800154c <main+0x258>
		  		  			  {
		  		  			  //print error
		  		  				ssd1306_Fill(0);          		// 0 NEGRO
 8001472:	2000      	movs	r0, #0
 8001474:	f001 f80e 	bl	8002494 <ssd1306_Fill>
		  		  			  	ssd1306_SetCursor( 18, 5 );
 8001478:	2105      	movs	r1, #5
 800147a:	2012      	movs	r0, #18
 800147c:	f001 f964 	bl	8002748 <ssd1306_SetCursor>
		  		  				ssd1306_WriteString("CODIGO", Font_11x18, 1);
 8001480:	4a2b      	ldr	r2, [pc, #172]	; (8001530 <main+0x23c>)
 8001482:	2301      	movs	r3, #1
 8001484:	ca06      	ldmia	r2, {r1, r2}
 8001486:	482c      	ldr	r0, [pc, #176]	; (8001538 <main+0x244>)
 8001488:	f001 f938 	bl	80026fc <ssd1306_WriteString>
		  		  				ssd1306_SetCursor( 10, 20 );
 800148c:	2114      	movs	r1, #20
 800148e:	200a      	movs	r0, #10
 8001490:	f001 f95a 	bl	8002748 <ssd1306_SetCursor>
		  		  				ssd1306_WriteString("INCORRECTO", Font_11x18, 1);
 8001494:	4a26      	ldr	r2, [pc, #152]	; (8001530 <main+0x23c>)
 8001496:	2301      	movs	r3, #1
 8001498:	ca06      	ldmia	r2, {r1, r2}
 800149a:	482b      	ldr	r0, [pc, #172]	; (8001548 <main+0x254>)
 800149c:	f001 f92e 	bl	80026fc <ssd1306_WriteString>
		  		  				ssd1306_SetCursor( 18, 40 );
 80014a0:	2128      	movs	r1, #40	; 0x28
 80014a2:	2012      	movs	r0, #18
 80014a4:	f001 f950 	bl	8002748 <ssd1306_SetCursor>
		  		  				ssd1306_WriteString(Keypad4x4_GetChar(j), Font_11x18, 1);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff10 	bl	80012d0 <Keypad4x4_GetChar>
 80014b0:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <main+0x23c>)
 80014b2:	2301      	movs	r3, #1
 80014b4:	ca06      	ldmia	r2, {r1, r2}
 80014b6:	f001 f921 	bl	80026fc <ssd1306_WriteString>
		  		  				ssd1306_UpdateScreen(&hi2c1);
 80014ba:	4812      	ldr	r0, [pc, #72]	; (8001504 <main+0x210>)
 80014bc:	f001 f80c 	bl	80024d8 <ssd1306_UpdateScreen>

		  		  				HAL_Delay(1000);
 80014c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c4:	f001 fc6e 	bl	8002da4 <HAL_Delay>
		  		  				ssd1306_Fill(0);          		// 0 NEGRO
 80014c8:	2000      	movs	r0, #0
 80014ca:	f000 ffe3 	bl	8002494 <ssd1306_Fill>
		  		  				ssd1306_SetCursor( 12, 5 );
 80014ce:	2105      	movs	r1, #5
 80014d0:	200c      	movs	r0, #12
 80014d2:	f001 f939 	bl	8002748 <ssd1306_SetCursor>
		  		  				ssd1306_WriteString("INTRODUZCA", Font_11x18, 1);
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <main+0x23c>)
 80014d8:	2301      	movs	r3, #1
 80014da:	ca06      	ldmia	r2, {r1, r2}
 80014dc:	4815      	ldr	r0, [pc, #84]	; (8001534 <main+0x240>)
 80014de:	f001 f90d 	bl	80026fc <ssd1306_WriteString>
		  		  				ssd1306_SetCursor( 12, 20 );
 80014e2:	2114      	movs	r1, #20
 80014e4:	200c      	movs	r0, #12
 80014e6:	f001 f92f 	bl	8002748 <ssd1306_SetCursor>
		  		  				ssd1306_WriteString("CODIGO", Font_11x18, 1);
 80014ea:	4a11      	ldr	r2, [pc, #68]	; (8001530 <main+0x23c>)
 80014ec:	2301      	movs	r3, #1
 80014ee:	ca06      	ldmia	r2, {r1, r2}
 80014f0:	4811      	ldr	r0, [pc, #68]	; (8001538 <main+0x244>)
 80014f2:	f001 f903 	bl	80026fc <ssd1306_WriteString>
		  		  				ssd1306_UpdateScreen(&hi2c1);
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <main+0x210>)
 80014f8:	f000 ffee 	bl	80024d8 <ssd1306_UpdateScreen>
		  		  				i=0;
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <main+0x24c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	e042      	b.n	800158a <main+0x296>
 8001504:	20000548 	.word	0x20000548
 8001508:	200006d4 	.word	0x200006d4
 800150c:	200004d4 	.word	0x200004d4
 8001510:	200005ec 	.word	0x200005ec
 8001514:	40020800 	.word	0x40020800
 8001518:	20000508 	.word	0x20000508
 800151c:	200004d8 	.word	0x200004d8
 8001520:	40020c00 	.word	0x40020c00
 8001524:	200000c5 	.word	0x200000c5
 8001528:	200000b8 	.word	0x200000b8
 800152c:	200000c4 	.word	0x200000c4
 8001530:	20000040 	.word	0x20000040
 8001534:	08006b90 	.word	0x08006b90
 8001538:	08006b9c 	.word	0x08006b9c
 800153c:	2000059c 	.word	0x2000059c
 8001540:	200000c8 	.word	0x200000c8
 8001544:	20000048 	.word	0x20000048
 8001548:	08006ba4 	.word	0x08006ba4
		  		  			  }

		  		  			  else
		  		  			  {
		  		  			  //continua
		  		  				ssd1306_SetCursor( 18+10*i, 40 );
 800154c:	4ba1      	ldr	r3, [pc, #644]	; (80017d4 <main+0x4e0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3312      	adds	r3, #18
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2128      	movs	r1, #40	; 0x28
 8001562:	4618      	mov	r0, r3
 8001564:	f001 f8f0 	bl	8002748 <ssd1306_SetCursor>
		  		  				ssd1306_WriteString(Keypad4x4_GetChar(j), Font_11x18, 1);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff feb0 	bl	80012d0 <Keypad4x4_GetChar>
 8001570:	4a99      	ldr	r2, [pc, #612]	; (80017d8 <main+0x4e4>)
 8001572:	2301      	movs	r3, #1
 8001574:	ca06      	ldmia	r2, {r1, r2}
 8001576:	f001 f8c1 	bl	80026fc <ssd1306_WriteString>
		  		  				ssd1306_UpdateScreen(&hi2c1);
 800157a:	4898      	ldr	r0, [pc, #608]	; (80017dc <main+0x4e8>)
 800157c:	f000 ffac 	bl	80024d8 <ssd1306_UpdateScreen>
		  		  				i++;
 8001580:	4b94      	ldr	r3, [pc, #592]	; (80017d4 <main+0x4e0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	4a93      	ldr	r2, [pc, #588]	; (80017d4 <main+0x4e0>)
 8001588:	6013      	str	r3, [r2, #0]
			  for(uint8_t j=0; j<16; j++)
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	3301      	adds	r3, #1
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	f67f af56 	bls.w	8001444 <main+0x150>
		  		  			  }
		  		  			  //HAL_Delay(100);
		  		  		  }
			  }
			  HAL_Delay(100);
 8001598:	2064      	movs	r0, #100	; 0x64
 800159a:	f001 fc03 	bl	8002da4 <HAL_Delay>
		  	}while(i<4);
 800159e:	4b8d      	ldr	r3, [pc, #564]	; (80017d4 <main+0x4e0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	f77f af48 	ble.w	8001438 <main+0x144>
		    contrasena_bit = 1;
 80015a8:	4b8d      	ldr	r3, [pc, #564]	; (80017e0 <main+0x4ec>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]



	  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
	  //HAL_Delay(1000);
	  if (contrasena_bit == 1 && puerta == 0)
 80015ae:	4b8c      	ldr	r3, [pc, #560]	; (80017e0 <main+0x4ec>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d176      	bne.n	80016a4 <main+0x3b0>
 80015b6:	4b8b      	ldr	r3, [pc, #556]	; (80017e4 <main+0x4f0>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d172      	bne.n	80016a4 <main+0x3b0>
	  {
		  ssd1306_Fill(0);          		// 0 NEGRO
 80015be:	2000      	movs	r0, #0
 80015c0:	f000 ff68 	bl	8002494 <ssd1306_Fill>
		  ssd1306_SetCursor( 18, 10 );
 80015c4:	210a      	movs	r1, #10
 80015c6:	2012      	movs	r0, #18
 80015c8:	f001 f8be 	bl	8002748 <ssd1306_SetCursor>
		  ssd1306_WriteString("CODIGO", Font_11x18, 1);
 80015cc:	4a82      	ldr	r2, [pc, #520]	; (80017d8 <main+0x4e4>)
 80015ce:	2301      	movs	r3, #1
 80015d0:	ca06      	ldmia	r2, {r1, r2}
 80015d2:	4885      	ldr	r0, [pc, #532]	; (80017e8 <main+0x4f4>)
 80015d4:	f001 f892 	bl	80026fc <ssd1306_WriteString>
		  ssd1306_SetCursor( 18, 30 );
 80015d8:	211e      	movs	r1, #30
 80015da:	2012      	movs	r0, #18
 80015dc:	f001 f8b4 	bl	8002748 <ssd1306_SetCursor>
		  ssd1306_WriteString("CORRECT0", Font_11x18, 1);
 80015e0:	4a7d      	ldr	r2, [pc, #500]	; (80017d8 <main+0x4e4>)
 80015e2:	2301      	movs	r3, #1
 80015e4:	ca06      	ldmia	r2, {r1, r2}
 80015e6:	4881      	ldr	r0, [pc, #516]	; (80017ec <main+0x4f8>)
 80015e8:	f001 f888 	bl	80026fc <ssd1306_WriteString>
		  ssd1306_UpdateScreen(&hi2c1);
 80015ec:	487b      	ldr	r0, [pc, #492]	; (80017dc <main+0x4e8>)
 80015ee:	f000 ff73 	bl	80024d8 <ssd1306_UpdateScreen>
		  HAL_Delay(1000);
 80015f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015f6:	f001 fbd5 	bl	8002da4 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); // ARRANCA MOTOR *MIRAR DIRECCION
 80015fa:	2201      	movs	r2, #1
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	487c      	ldr	r0, [pc, #496]	; (80017f0 <main+0x4fc>)
 8001600:	f002 ff6c 	bl	80044dc <HAL_GPIO_WritePin>
		  HAL_Delay(800); // AJUSTAR PARA QUE SALGA DEL AGUJERO
 8001604:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001608:	f001 fbcc 	bl	8002da4 <HAL_Delay>
		  ssd1306_Fill(0);          		// 0 NEGRO
 800160c:	2000      	movs	r0, #0
 800160e:	f000 ff41 	bl	8002494 <ssd1306_Fill>
		  ssd1306_SetCursor( 18, 10 );
 8001612:	210a      	movs	r1, #10
 8001614:	2012      	movs	r0, #18
 8001616:	f001 f897 	bl	8002748 <ssd1306_SetCursor>
		  ssd1306_WriteString("ABRIENDO", Font_11x18, 1);
 800161a:	4a6f      	ldr	r2, [pc, #444]	; (80017d8 <main+0x4e4>)
 800161c:	2301      	movs	r3, #1
 800161e:	ca06      	ldmia	r2, {r1, r2}
 8001620:	4874      	ldr	r0, [pc, #464]	; (80017f4 <main+0x500>)
 8001622:	f001 f86b 	bl	80026fc <ssd1306_WriteString>
		  ssd1306_SetCursor( 18, 30 );
 8001626:	211e      	movs	r1, #30
 8001628:	2012      	movs	r0, #18
 800162a:	f001 f88d 	bl	8002748 <ssd1306_SetCursor>
		  ssd1306_WriteString("PUERTA", Font_11x18, 1);
 800162e:	4a6a      	ldr	r2, [pc, #424]	; (80017d8 <main+0x4e4>)
 8001630:	2301      	movs	r3, #1
 8001632:	ca06      	ldmia	r2, {r1, r2}
 8001634:	4870      	ldr	r0, [pc, #448]	; (80017f8 <main+0x504>)
 8001636:	f001 f861 	bl	80026fc <ssd1306_WriteString>
		  ssd1306_UpdateScreen(&hi2c1);
 800163a:	4868      	ldr	r0, [pc, #416]	; (80017dc <main+0x4e8>)
 800163c:	f000 ff4c 	bl	80024d8 <ssd1306_UpdateScreen>

		  do
		  {
			  dist_Ultrasonidos();
 8001640:	f000 fc5e 	bl	8001f00 <dist_Ultrasonidos>
		  }while((distancia <= 4.05f));
 8001644:	4b6d      	ldr	r3, [pc, #436]	; (80017fc <main+0x508>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001800 <main+0x50c>
 800164e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	d9f3      	bls.n	8001640 <main+0x34c>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // PARA MOTOR
 8001658:	2200      	movs	r2, #0
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	4864      	ldr	r0, [pc, #400]	; (80017f0 <main+0x4fc>)
 800165e:	f002 ff3d 	bl	80044dc <HAL_GPIO_WritePin>

		  ssd1306_Fill(0);          		// 0 NEGRO
 8001662:	2000      	movs	r0, #0
 8001664:	f000 ff16 	bl	8002494 <ssd1306_Fill>
		  ssd1306_SetCursor( 18, 10 );
 8001668:	210a      	movs	r1, #10
 800166a:	2012      	movs	r0, #18
 800166c:	f001 f86c 	bl	8002748 <ssd1306_SetCursor>
		  ssd1306_WriteString("PUERTA", Font_11x18, 1);
 8001670:	4a59      	ldr	r2, [pc, #356]	; (80017d8 <main+0x4e4>)
 8001672:	2301      	movs	r3, #1
 8001674:	ca06      	ldmia	r2, {r1, r2}
 8001676:	4860      	ldr	r0, [pc, #384]	; (80017f8 <main+0x504>)
 8001678:	f001 f840 	bl	80026fc <ssd1306_WriteString>
		  ssd1306_SetCursor( 18, 30 );
 800167c:	211e      	movs	r1, #30
 800167e:	2012      	movs	r0, #18
 8001680:	f001 f862 	bl	8002748 <ssd1306_SetCursor>
		  ssd1306_WriteString("ABIERTA", Font_11x18, 1);
 8001684:	4a54      	ldr	r2, [pc, #336]	; (80017d8 <main+0x4e4>)
 8001686:	2301      	movs	r3, #1
 8001688:	ca06      	ldmia	r2, {r1, r2}
 800168a:	485e      	ldr	r0, [pc, #376]	; (8001804 <main+0x510>)
 800168c:	f001 f836 	bl	80026fc <ssd1306_WriteString>
		  ssd1306_UpdateScreen(&hi2c1);
 8001690:	4852      	ldr	r0, [pc, #328]	; (80017dc <main+0x4e8>)
 8001692:	f000 ff21 	bl	80024d8 <ssd1306_UpdateScreen>

		  puerta = 1;
 8001696:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <main+0x4f0>)
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(5000);
 800169c:	f241 3088 	movw	r0, #5000	; 0x1388
 80016a0:	f001 fb80 	bl	8002da4 <HAL_Delay>

	  }
	  if(puerta == 1)
 80016a4:	4b4f      	ldr	r3, [pc, #316]	; (80017e4 <main+0x4f0>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d120      	bne.n	80016ee <main+0x3fa>
	  {
		  while(ADC_value_ir >= 2500)
 80016ac:	e019      	b.n	80016e2 <main+0x3ee>
		  {
			  ssd1306_Fill(0);          		// 0 NEGRO
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 fef0 	bl	8002494 <ssd1306_Fill>
			  ssd1306_SetCursor( 18, 10 );
 80016b4:	210a      	movs	r1, #10
 80016b6:	2012      	movs	r0, #18
 80016b8:	f001 f846 	bl	8002748 <ssd1306_SetCursor>
			  ssd1306_WriteString("OBJETO", Font_11x18, 1);
 80016bc:	4a46      	ldr	r2, [pc, #280]	; (80017d8 <main+0x4e4>)
 80016be:	2301      	movs	r3, #1
 80016c0:	ca06      	ldmia	r2, {r1, r2}
 80016c2:	4851      	ldr	r0, [pc, #324]	; (8001808 <main+0x514>)
 80016c4:	f001 f81a 	bl	80026fc <ssd1306_WriteString>
			  ssd1306_SetCursor( 18, 30 );
 80016c8:	211e      	movs	r1, #30
 80016ca:	2012      	movs	r0, #18
 80016cc:	f001 f83c 	bl	8002748 <ssd1306_SetCursor>
			  ssd1306_WriteString("DETECTADO", Font_11x18, 1);
 80016d0:	4a41      	ldr	r2, [pc, #260]	; (80017d8 <main+0x4e4>)
 80016d2:	2301      	movs	r3, #1
 80016d4:	ca06      	ldmia	r2, {r1, r2}
 80016d6:	484d      	ldr	r0, [pc, #308]	; (800180c <main+0x518>)
 80016d8:	f001 f810 	bl	80026fc <ssd1306_WriteString>
			  ssd1306_UpdateScreen(&hi2c1);
 80016dc:	483f      	ldr	r0, [pc, #252]	; (80017dc <main+0x4e8>)
 80016de:	f000 fefb 	bl	80024d8 <ssd1306_UpdateScreen>
		  while(ADC_value_ir >= 2500)
 80016e2:	4b4b      	ldr	r3, [pc, #300]	; (8001810 <main+0x51c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d8df      	bhi.n	80016ae <main+0x3ba>
		  }
	  }

	  if((ADC_value_ir <= 2500) && (ADC_value_ir >= 1000) && (puerta == 1)) // MIRAR DISTANCIA PARA AJUSTAR
 80016ee:	4b48      	ldr	r3, [pc, #288]	; (8001810 <main+0x51c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80016f6:	4293      	cmp	r3, r2
 80016f8:	f63f ae6b 	bhi.w	80013d2 <main+0xde>
 80016fc:	4b44      	ldr	r3, [pc, #272]	; (8001810 <main+0x51c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001704:	f4ff ae65 	bcc.w	80013d2 <main+0xde>
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <main+0x4f0>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	f47f ae60 	bne.w	80013d2 <main+0xde>
	  {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // ARRANCA MOTOR *MIRAR DIRECCION
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	4835      	ldr	r0, [pc, #212]	; (80017f0 <main+0x4fc>)
 800171a:	f002 fedf 	bl	80044dc <HAL_GPIO_WritePin>
			HAL_Delay(800); // AJUSTAR PARA QUE SALGA DEL AGUJERO
 800171e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001722:	f001 fb3f 	bl	8002da4 <HAL_Delay>
			ssd1306_Fill(0);          		// 0 NEGRO
 8001726:	2000      	movs	r0, #0
 8001728:	f000 feb4 	bl	8002494 <ssd1306_Fill>
			ssd1306_SetCursor( 18, 10 );
 800172c:	210a      	movs	r1, #10
 800172e:	2012      	movs	r0, #18
 8001730:	f001 f80a 	bl	8002748 <ssd1306_SetCursor>
			ssd1306_WriteString("CERRANDO", Font_11x18, 1);
 8001734:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <main+0x4e4>)
 8001736:	2301      	movs	r3, #1
 8001738:	ca06      	ldmia	r2, {r1, r2}
 800173a:	4836      	ldr	r0, [pc, #216]	; (8001814 <main+0x520>)
 800173c:	f000 ffde 	bl	80026fc <ssd1306_WriteString>
			ssd1306_SetCursor( 18, 30 );
 8001740:	211e      	movs	r1, #30
 8001742:	2012      	movs	r0, #18
 8001744:	f001 f800 	bl	8002748 <ssd1306_SetCursor>
			ssd1306_WriteString("PUERTA", Font_11x18, 1);
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <main+0x4e4>)
 800174a:	2301      	movs	r3, #1
 800174c:	ca06      	ldmia	r2, {r1, r2}
 800174e:	482a      	ldr	r0, [pc, #168]	; (80017f8 <main+0x504>)
 8001750:	f000 ffd4 	bl	80026fc <ssd1306_WriteString>
			ssd1306_UpdateScreen(&hi2c1);
 8001754:	4821      	ldr	r0, [pc, #132]	; (80017dc <main+0x4e8>)
 8001756:	f000 febf 	bl	80024d8 <ssd1306_UpdateScreen>

			do
			{
				dist_Ultrasonidos();
 800175a:	f000 fbd1 	bl	8001f00 <dist_Ultrasonidos>
			}while(distancia <= 4.05f);
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <main+0x508>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001800 <main+0x50c>
 8001768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	d9f3      	bls.n	800175a <main+0x466>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // PARA MOTOR
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	481d      	ldr	r0, [pc, #116]	; (80017f0 <main+0x4fc>)
 800177a:	f002 feaf 	bl	80044dc <HAL_GPIO_WritePin>

			ssd1306_Fill(0);          		// 0 NEGRO
 800177e:	2000      	movs	r0, #0
 8001780:	f000 fe88 	bl	8002494 <ssd1306_Fill>
			ssd1306_SetCursor( 18, 10 );
 8001784:	210a      	movs	r1, #10
 8001786:	2012      	movs	r0, #18
 8001788:	f000 ffde 	bl	8002748 <ssd1306_SetCursor>
			ssd1306_WriteString("PUERTA", Font_11x18, 1);
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <main+0x4e4>)
 800178e:	2301      	movs	r3, #1
 8001790:	ca06      	ldmia	r2, {r1, r2}
 8001792:	4819      	ldr	r0, [pc, #100]	; (80017f8 <main+0x504>)
 8001794:	f000 ffb2 	bl	80026fc <ssd1306_WriteString>
			ssd1306_SetCursor( 18, 30 );
 8001798:	211e      	movs	r1, #30
 800179a:	2012      	movs	r0, #18
 800179c:	f000 ffd4 	bl	8002748 <ssd1306_SetCursor>
			ssd1306_WriteString("CERRADA", Font_11x18, 1);
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <main+0x4e4>)
 80017a2:	2301      	movs	r3, #1
 80017a4:	ca06      	ldmia	r2, {r1, r2}
 80017a6:	481c      	ldr	r0, [pc, #112]	; (8001818 <main+0x524>)
 80017a8:	f000 ffa8 	bl	80026fc <ssd1306_WriteString>
			ssd1306_UpdateScreen(&hi2c1);
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <main+0x4e8>)
 80017ae:	f000 fe93 	bl	80024d8 <ssd1306_UpdateScreen>

			boton=0;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <main+0x528>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
			puerta = 0;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <main+0x4f0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
			contrasena_bit = 0;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <main+0x4ec>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
			i=0;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <main+0x4e0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

			HAL_Delay(2000);
 80017ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017ce:	f001 fae9 	bl	8002da4 <HAL_Delay>
	  if(boton == 0 && puerta == 0)
 80017d2:	e5fe      	b.n	80013d2 <main+0xde>
 80017d4:	200000c8 	.word	0x200000c8
 80017d8:	20000040 	.word	0x20000040
 80017dc:	20000548 	.word	0x20000548
 80017e0:	200000c4 	.word	0x200000c4
 80017e4:	200000b8 	.word	0x200000b8
 80017e8:	08006b9c 	.word	0x08006b9c
 80017ec:	08006bb0 	.word	0x08006bb0
 80017f0:	40020800 	.word	0x40020800
 80017f4:	08006bbc 	.word	0x08006bbc
 80017f8:	08006bc8 	.word	0x08006bc8
 80017fc:	200006d8 	.word	0x200006d8
 8001800:	4081999a 	.word	0x4081999a
 8001804:	08006bd0 	.word	0x08006bd0
 8001808:	08006bd8 	.word	0x08006bd8
 800180c:	08006be0 	.word	0x08006be0
 8001810:	200004d4 	.word	0x200004d4
 8001814:	08006bec 	.word	0x08006bec
 8001818:	08006bf8 	.word	0x08006bf8
 800181c:	200000c5 	.word	0x200000c5

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b094      	sub	sp, #80	; 0x50
 8001824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 0320 	add.w	r3, r7, #32
 800182a:	2230      	movs	r2, #48	; 0x30
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f005 f970 	bl	8006b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	4b28      	ldr	r3, [pc, #160]	; (80018ec <SystemClock_Config+0xcc>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <SystemClock_Config+0xcc>)
 800184e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001852:	6413      	str	r3, [r2, #64]	; 0x40
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <SystemClock_Config+0xcc>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <SystemClock_Config+0xd0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <SystemClock_Config+0xd0>)
 800186a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <SystemClock_Config+0xd0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800187c:	2301      	movs	r3, #1
 800187e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001886:	2302      	movs	r3, #2
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800188a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001890:	2304      	movs	r3, #4
 8001892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001894:	23a8      	movs	r3, #168	; 0xa8
 8001896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001898:	2302      	movs	r3, #2
 800189a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800189c:	2304      	movs	r3, #4
 800189e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fa9b 	bl	8004de0 <HAL_RCC_OscConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018b0:	f000 fcb2 	bl	8002218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b4:	230f      	movs	r3, #15
 80018b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b8:	2302      	movs	r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2105      	movs	r1, #5
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fcf4 	bl	80052c0 <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018de:	f000 fc9b 	bl	8002218 <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3750      	adds	r7, #80	; 0x50
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000

080018f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <MX_ADC1_Init+0x98>)
 8001908:	4a21      	ldr	r2, [pc, #132]	; (8001990 <MX_ADC1_Init+0x9c>)
 800190a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_ADC1_Init+0x98>)
 800190e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001912:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <MX_ADC1_Init+0x98>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_ADC1_Init+0x98>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <MX_ADC1_Init+0x98>)
 8001922:	2201      	movs	r2, #1
 8001924:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <MX_ADC1_Init+0x98>)
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_ADC1_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <MX_ADC1_Init+0x98>)
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <MX_ADC1_Init+0xa0>)
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_ADC1_Init+0x98>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <MX_ADC1_Init+0x98>)
 8001942:	2201      	movs	r2, #1
 8001944:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_ADC1_Init+0x98>)
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_ADC1_Init+0x98>)
 8001950:	2201      	movs	r2, #1
 8001952:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001954:	480d      	ldr	r0, [pc, #52]	; (800198c <MX_ADC1_Init+0x98>)
 8001956:	f001 fa47 	bl	8002de8 <HAL_ADC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001960:	f000 fc5a 	bl	8002218 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001964:	2301      	movs	r3, #1
 8001966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001968:	2301      	movs	r3, #1
 800196a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800196c:	2307      	movs	r3, #7
 800196e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_ADC1_Init+0x98>)
 8001976:	f001 fcd5 	bl	8003324 <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001980:	f000 fc4a 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200005ec 	.word	0x200005ec
 8001990:	40012000 	.word	0x40012000
 8001994:	0f000001 	.word	0x0f000001

08001998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_I2C1_Init+0x50>)
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <MX_I2C1_Init+0x54>)
 80019a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019a4:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_I2C1_Init+0x58>)
 80019a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019d6:	f002 fdb3 	bl	8004540 <HAL_I2C_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019e0:	f000 fc1a 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000548 	.word	0x20000548
 80019ec:	40005400 	.word	0x40005400
 80019f0:	000186a0 	.word	0x000186a0

080019f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <MX_TIM1_Init+0x98>)
 8001a12:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <MX_TIM1_Init+0x9c>)
 8001a14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <MX_TIM1_Init+0x98>)
 8001a18:	2253      	movs	r2, #83	; 0x53
 8001a1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_TIM1_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <MX_TIM1_Init+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_TIM1_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_TIM1_Init+0x98>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <MX_TIM1_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a3a:	4814      	ldr	r0, [pc, #80]	; (8001a8c <MX_TIM1_Init+0x98>)
 8001a3c:	f003 fe1e 	bl	800567c <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001a46:	f000 fbe7 	bl	8002218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4619      	mov	r1, r3
 8001a56:	480d      	ldr	r0, [pc, #52]	; (8001a8c <MX_TIM1_Init+0x98>)
 8001a58:	f004 fa4a 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001a62:	f000 fbd9 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_TIM1_Init+0x98>)
 8001a74:	f004 ff9a 	bl	80069ac <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001a7e:	f000 fbcb 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000694 	.word	0x20000694
 8001a90:	40010000 	.word	0x40010000

08001a94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	; (8001b70 <MX_TIM3_Init+0xdc>)
 8001ac2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001ac6:	2253      	movs	r2, #83	; 0x53
 8001ac8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ae4:	4821      	ldr	r0, [pc, #132]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001ae6:	f003 fdc9 	bl	800567c <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001af0:	f000 fb92 	bl	8002218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	4619      	mov	r1, r3
 8001b00:	481a      	ldr	r0, [pc, #104]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001b02:	f004 f9f5 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b0c:	f000 fb84 	bl	8002218 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001b10:	4816      	ldr	r0, [pc, #88]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001b12:	f003 fe75 	bl	8005800 <HAL_TIM_IC_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b1c:	f000 fb7c 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480f      	ldr	r0, [pc, #60]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001b30:	f004 ff3c 	bl	80069ac <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001b3a:	f000 fb6d 	bl	8002218 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001b3e:	230a      	movs	r3, #10
 8001b40:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b42:	2301      	movs	r3, #1
 8001b44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2200      	movs	r2, #0
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_TIM3_Init+0xd8>)
 8001b56:	f004 f869 	bl	8005c2c <HAL_TIM_IC_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001b60:	f000 fb5a 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200005ac 	.word	0x200005ac
 8001b70:	40000400 	.word	0x40000400

08001b74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	615a      	str	r2, [r3, #20]
 8001ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001ba6:	4a2d      	ldr	r2, [pc, #180]	; (8001c5c <MX_TIM4_Init+0xe8>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001baa:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001bac:	220f      	movs	r2, #15
 8001bae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001bb8:	2264      	movs	r2, #100	; 0x64
 8001bba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bc8:	4823      	ldr	r0, [pc, #140]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001bca:	f003 fd57 	bl	800567c <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001bd4:	f000 fb20 	bl	8002218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be2:	4619      	mov	r1, r3
 8001be4:	481c      	ldr	r0, [pc, #112]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001be6:	f004 f983 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001bf0:	f000 fb12 	bl	8002218 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bf4:	4818      	ldr	r0, [pc, #96]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001bf6:	f003 fd90 	bl	800571a <HAL_TIM_PWM_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001c00:	f000 fb0a 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c0c:	f107 0320 	add.w	r3, r7, #32
 8001c10:	4619      	mov	r1, r3
 8001c12:	4811      	ldr	r0, [pc, #68]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001c14:	f004 feca 	bl	80069ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001c1e:	f000 fafb 	bl	8002218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c22:	2360      	movs	r3, #96	; 0x60
 8001c24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 75;
 8001c26:	234b      	movs	r3, #75	; 0x4b
 8001c28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	4619      	mov	r1, r3
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001c3a:	f004 f893 	bl	8005d64 <HAL_TIM_PWM_ConfigChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001c44:	f000 fae8 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <MX_TIM4_Init+0xe4>)
 8001c4a:	f000 ff6b 	bl	8002b24 <HAL_TIM_MspPostInit>

}
 8001c4e:	bf00      	nop
 8001c50:	3738      	adds	r7, #56	; 0x38
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000508 	.word	0x20000508
 8001c5c:	40000800 	.word	0x40000800

08001c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_DMA_Init+0x3c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <MX_DMA_Init+0x3c>)
 8001c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_DMA_Init+0x3c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2038      	movs	r0, #56	; 0x38
 8001c88:	f001 fed1 	bl	8003a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c8c:	2038      	movs	r0, #56	; 0x38
 8001c8e:	f001 feea 	bl	8003a66 <HAL_NVIC_EnableIRQ>

}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a52      	ldr	r2, [pc, #328]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b50      	ldr	r3, [pc, #320]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b45      	ldr	r3, [pc, #276]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a44      	ldr	r2, [pc, #272]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a3d      	ldr	r2, [pc, #244]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a36      	ldr	r2, [pc, #216]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <MX_GPIO_Init+0x168>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|TRIG_Pin|GPIO_PIN_0|GPIO_PIN_1
 8001d42:	2200      	movs	r2, #0
 8001d44:	f642 010f 	movw	r1, #10255	; 0x280f
 8001d48:	4830      	ldr	r0, [pc, #192]	; (8001e0c <MX_GPIO_Init+0x16c>)
 8001d4a:	f002 fbc7 	bl	80044dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001d54:	482e      	ldr	r0, [pc, #184]	; (8001e10 <MX_GPIO_Init+0x170>)
 8001d56:	f002 fbc1 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d60:	482c      	ldr	r0, [pc, #176]	; (8001e14 <MX_GPIO_Init+0x174>)
 8001d62:	f002 fbbb 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d66:	2301      	movs	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <MX_GPIO_Init+0x178>)
 8001d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4826      	ldr	r0, [pc, #152]	; (8001e14 <MX_GPIO_Init+0x174>)
 8001d7a:	f002 f9fd 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 TRIG_Pin PD0 PD1
                           PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|TRIG_Pin|GPIO_PIN_0|GPIO_PIN_1
 8001d7e:	f642 030f 	movw	r3, #10255	; 0x280f
 8001d82:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	481d      	ldr	r0, [pc, #116]	; (8001e0c <MX_GPIO_Init+0x16c>)
 8001d98:	f002 f9ee 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d9c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4816      	ldr	r0, [pc, #88]	; (8001e10 <MX_GPIO_Init+0x170>)
 8001db6:	f002 f9df 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4810      	ldr	r0, [pc, #64]	; (8001e14 <MX_GPIO_Init+0x174>)
 8001dd4:	f002 f9d0 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dd8:	23f0      	movs	r3, #240	; 0xf0
 8001dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4808      	ldr	r0, [pc, #32]	; (8001e0c <MX_GPIO_Init+0x16c>)
 8001dec:	f002 f9c4 	bl	8004178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	2006      	movs	r0, #6
 8001df6:	f001 fe1a 	bl	8003a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001dfa:	2006      	movs	r0, #6
 8001dfc:	f001 fe33 	bl	8003a66 <HAL_NVIC_EnableIRQ>

}
 8001e00:	bf00      	nop
 8001e02:	3728      	adds	r7, #40	; 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40020800 	.word	0x40020800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	10110000 	.word	0x10110000

08001e1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)// TESTEO CON BOTON PLACA
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  boton=1;
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	200000c5 	.word	0x200000c5

08001e3c <usDelay>:


void usDelay (uint16_t uSec)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
	if(uSec < 2) uSec = 2;
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d801      	bhi.n	8001e50 <usDelay+0x14>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	80fb      	strh	r3, [r7, #6]
	usTIM -> ARR = uSec -1;
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	1e5a      	subs	r2, r3, #1
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <usDelay+0x60>)
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
	usTIM -> EGR = 1;
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <usDelay+0x60>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	615a      	str	r2, [r3, #20]
	usTIM -> SR &= 1;
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <usDelay+0x60>)
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <usDelay+0x60>)
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	6113      	str	r3, [r2, #16]
	usTIM -> CR1 |= 1;
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <usDelay+0x60>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <usDelay+0x60>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6013      	str	r3, [r2, #0]
	while((TIM1 -> SR & 0x0001) != 1);
 8001e76:	bf00      	nop
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <usDelay+0x60>)
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d1f9      	bne.n	8001e78 <usDelay+0x3c>
	usTIM -> SR &= ~(0x0001);
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <usDelay+0x60>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <usDelay+0x60>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	6113      	str	r3, [r2, #16]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	40010000 	.word	0x40010000

08001ea0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

		if(captureIdx == 0) //Fisrt edge
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10a      	bne.n	8001ec6 <HAL_TIM_IC_CaptureCallback+0x26>
		{
			edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //__HAL_TIM_GetCounter(&htim3);//
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f004 f8d4 	bl	8006060 <HAL_TIM_ReadCapturedValue>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001ebc:	601a      	str	r2, [r3, #0]

			captureIdx = 1;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
		{
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			captureIdx = 0;
			icFlag = 1;
		}
}
 8001ec4:	e010      	b.n	8001ee8 <HAL_TIM_IC_CaptureCallback+0x48>
		else if(captureIdx == 1) //Second edge
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_TIM_IC_CaptureCallback+0x48>
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f004 f8c5 	bl	8006060 <HAL_TIM_ReadCapturedValue>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001eda:	601a      	str	r2, [r3, #0]
			captureIdx = 0;
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
			icFlag = 1;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200000ba 	.word	0x200000ba
 8001ef4:	200000bc 	.word	0x200000bc
 8001ef8:	200000c0 	.word	0x200000c0
 8001efc:	200000b9 	.word	0x200000b9

08001f00 <dist_Ultrasonidos>:


void dist_Ultrasonidos(void)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f0c:	4836      	ldr	r0, [pc, #216]	; (8001fe8 <dist_Ultrasonidos+0xe8>)
 8001f0e:	f002 fae5 	bl	80044dc <HAL_GPIO_WritePin>
	usDelay(3);
 8001f12:	2003      	movs	r0, #3
 8001f14:	f7ff ff92 	bl	8001e3c <usDelay>

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1e:	4832      	ldr	r0, [pc, #200]	; (8001fe8 <dist_Ultrasonidos+0xe8>)
 8001f20:	f002 fadc 	bl	80044dc <HAL_GPIO_WritePin>
	usDelay(10);
 8001f24:	200a      	movs	r0, #10
 8001f26:	f7ff ff89 	bl	8001e3c <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f30:	482d      	ldr	r0, [pc, #180]	; (8001fe8 <dist_Ultrasonidos+0xe8>)
 8001f32:	f002 fad3 	bl	80044dc <HAL_GPIO_WritePin>

	 HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001f36:	2100      	movs	r1, #0
 8001f38:	482c      	ldr	r0, [pc, #176]	; (8001fec <dist_Ultrasonidos+0xec>)
 8001f3a:	f003 fc97 	bl	800586c <HAL_TIM_IC_Start_IT>
	//Wait for IC flag
	uint32_t startTick = HAL_GetTick();
 8001f3e:	f000 ff25 	bl	8002d8c <HAL_GetTick>
 8001f42:	6078      	str	r0, [r7, #4]
	do
	{
	 	if(icFlag) break;
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <dist_Ultrasonidos+0xf0>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d108      	bne.n	8001f5e <dist_Ultrasonidos+0x5e>
	}while((HAL_GetTick() - startTick) < 500);  //500ms
 8001f4c:	f000 ff1e 	bl	8002d8c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f5a:	d3f3      	bcc.n	8001f44 <dist_Ultrasonidos+0x44>
 8001f5c:	e000      	b.n	8001f60 <dist_Ultrasonidos+0x60>
	 	if(icFlag) break;
 8001f5e:	bf00      	nop
	icFlag = 0;
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <dist_Ultrasonidos+0xf0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001f66:	2100      	movs	r1, #0
 8001f68:	4820      	ldr	r0, [pc, #128]	; (8001fec <dist_Ultrasonidos+0xec>)
 8001f6a:	f003 fce7 	bl	800593c <HAL_TIM_IC_Stop_IT>

	//DISTANCIA EN CM
	if(edge2Time > edge1Time)
 8001f6e:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <dist_Ultrasonidos+0xf4>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <dist_Ultrasonidos+0xf8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d929      	bls.n	8001fce <dist_Ultrasonidos+0xce>
	{
	  	distancia = ((edge2Time - edge1Time) + 0.0f)*0.0343/2;
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <dist_Ultrasonidos+0xf4>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <dist_Ultrasonidos+0xf8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f8c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001ffc <dist_Ultrasonidos+0xfc>
 8001f90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f94:	ee17 0a90 	vmov	r0, s15
 8001f98:	f7fe fa84 	bl	80004a4 <__aeabi_f2d>
 8001f9c:	a310      	add	r3, pc, #64	; (adr r3, 8001fe0 <dist_Ultrasonidos+0xe0>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe fad7 	bl	8000554 <__aeabi_dmul>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	460c      	mov	r4, r1
 8001faa:	4618      	mov	r0, r3
 8001fac:	4621      	mov	r1, r4
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb6:	f7fe fbf7 	bl	80007a8 <__aeabi_ddiv>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	460c      	mov	r4, r1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	f7fe fcd9 	bl	8000978 <__aeabi_d2f>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <dist_Ultrasonidos+0x100>)
 8001fca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		distancia = 0.0f;
	}
}
 8001fcc:	e003      	b.n	8001fd6 <dist_Ultrasonidos+0xd6>
		distancia = 0.0f;
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <dist_Ultrasonidos+0x100>)
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	04816f00 	.word	0x04816f00
 8001fe4:	3fa18fc5 	.word	0x3fa18fc5
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	200005ac 	.word	0x200005ac
 8001ff0:	200000b9 	.word	0x200000b9
 8001ff4:	200000c0 	.word	0x200000c0
 8001ff8:	200000bc 	.word	0x200000bc
 8001ffc:	00000000 	.word	0x00000000
 8002000:	200006d8 	.word	0x200006d8

08002004 <animacion_ojos>:

void animacion_ojos(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af02      	add	r7, sp, #8
	uint32_t parp = 20;
 800200a:	2314      	movs	r3, #20
 800200c:	607b      	str	r3, [r7, #4]
	uint32_t stop = 1000;
 800200e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002012:	603b      	str	r3, [r7, #0]
	ssd1306_Fill(0);
 8002014:	2000      	movs	r0, #0
 8002016:	f000 fa3d 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_1,128,64,1);
 800201a:	2301      	movs	r3, #1
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	2340      	movs	r3, #64	; 0x40
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	4a6f      	ldr	r2, [pc, #444]	; (80021e4 <animacion_ojos+0x1e0>)
 8002026:	2100      	movs	r1, #0
 8002028:	2000      	movs	r0, #0
 800202a:	f000 fba5 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 800202e:	486e      	ldr	r0, [pc, #440]	; (80021e8 <animacion_ojos+0x1e4>)
 8002030:	f000 fa52 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(stop);
 8002034:	6838      	ldr	r0, [r7, #0]
 8002036:	f000 feb5 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 800203a:	2000      	movs	r0, #0
 800203c:	f000 fa2a 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_2,128,64,1);
 8002040:	2301      	movs	r3, #1
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	2340      	movs	r3, #64	; 0x40
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	4a68      	ldr	r2, [pc, #416]	; (80021ec <animacion_ojos+0x1e8>)
 800204c:	2100      	movs	r1, #0
 800204e:	2000      	movs	r0, #0
 8002050:	f000 fb92 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 8002054:	4864      	ldr	r0, [pc, #400]	; (80021e8 <animacion_ojos+0x1e4>)
 8002056:	f000 fa3f 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(parp);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fea2 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 8002060:	2000      	movs	r0, #0
 8002062:	f000 fa17 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_3,128,64,1);
 8002066:	2301      	movs	r3, #1
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	2340      	movs	r3, #64	; 0x40
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	4a5f      	ldr	r2, [pc, #380]	; (80021f0 <animacion_ojos+0x1ec>)
 8002072:	2100      	movs	r1, #0
 8002074:	2000      	movs	r0, #0
 8002076:	f000 fb7f 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 800207a:	485b      	ldr	r0, [pc, #364]	; (80021e8 <animacion_ojos+0x1e4>)
 800207c:	f000 fa2c 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(parp);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fe8f 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 8002086:	2000      	movs	r0, #0
 8002088:	f000 fa04 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_4,128,64,1);
 800208c:	2301      	movs	r3, #1
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2340      	movs	r3, #64	; 0x40
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	4a57      	ldr	r2, [pc, #348]	; (80021f4 <animacion_ojos+0x1f0>)
 8002098:	2100      	movs	r1, #0
 800209a:	2000      	movs	r0, #0
 800209c:	f000 fb6c 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 80020a0:	4851      	ldr	r0, [pc, #324]	; (80021e8 <animacion_ojos+0x1e4>)
 80020a2:	f000 fa19 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(parp);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fe7c 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f9f1 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_5,128,64,1);
 80020b2:	2301      	movs	r3, #1
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	2340      	movs	r3, #64	; 0x40
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <animacion_ojos+0x1f4>)
 80020be:	2100      	movs	r1, #0
 80020c0:	2000      	movs	r0, #0
 80020c2:	f000 fb59 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 80020c6:	4848      	ldr	r0, [pc, #288]	; (80021e8 <animacion_ojos+0x1e4>)
 80020c8:	f000 fa06 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(stop);
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f000 fe69 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f000 f9de 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_6,128,64,1);
 80020d8:	2301      	movs	r3, #1
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	2340      	movs	r3, #64	; 0x40
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	4a46      	ldr	r2, [pc, #280]	; (80021fc <animacion_ojos+0x1f8>)
 80020e4:	2100      	movs	r1, #0
 80020e6:	2000      	movs	r0, #0
 80020e8:	f000 fb46 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 80020ec:	483e      	ldr	r0, [pc, #248]	; (80021e8 <animacion_ojos+0x1e4>)
 80020ee:	f000 f9f3 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(parp);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fe56 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 80020f8:	2000      	movs	r0, #0
 80020fa:	f000 f9cb 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_7,128,64,1);
 80020fe:	2301      	movs	r3, #1
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2340      	movs	r3, #64	; 0x40
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <animacion_ojos+0x1fc>)
 800210a:	2100      	movs	r1, #0
 800210c:	2000      	movs	r0, #0
 800210e:	f000 fb33 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 8002112:	4835      	ldr	r0, [pc, #212]	; (80021e8 <animacion_ojos+0x1e4>)
 8002114:	f000 f9e0 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(parp);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fe43 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 800211e:	2000      	movs	r0, #0
 8002120:	f000 f9b8 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_8,128,64,1);
 8002124:	2301      	movs	r3, #1
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	2340      	movs	r3, #64	; 0x40
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	4a35      	ldr	r2, [pc, #212]	; (8002204 <animacion_ojos+0x200>)
 8002130:	2100      	movs	r1, #0
 8002132:	2000      	movs	r0, #0
 8002134:	f000 fb20 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 8002138:	482b      	ldr	r0, [pc, #172]	; (80021e8 <animacion_ojos+0x1e4>)
 800213a:	f000 f9cd 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(parp);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fe30 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 8002144:	2000      	movs	r0, #0
 8002146:	f000 f9a5 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_9,128,64,1);
 800214a:	2301      	movs	r3, #1
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2340      	movs	r3, #64	; 0x40
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	4a2c      	ldr	r2, [pc, #176]	; (8002208 <animacion_ojos+0x204>)
 8002156:	2100      	movs	r1, #0
 8002158:	2000      	movs	r0, #0
 800215a:	f000 fb0d 	bl	8002778 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen(&hi2c1);
 800215e:	4822      	ldr	r0, [pc, #136]	; (80021e8 <animacion_ojos+0x1e4>)
 8002160:	f000 f9ba 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(stop);
 8002164:	6838      	ldr	r0, [r7, #0]
 8002166:	f000 fe1d 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 800216a:	2000      	movs	r0, #0
 800216c:	f000 f992 	bl	8002494 <ssd1306_Fill>
	ssd1306_DrawBitmap(0,0,ojos_10,128,64,1);
 8002170:	2301      	movs	r3, #1
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	2340      	movs	r3, #64	; 0x40
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	4a24      	ldr	r2, [pc, #144]	; (800220c <animacion_ojos+0x208>)
 800217c:	2100      	movs	r1, #0
 800217e:	2000      	movs	r0, #0
 8002180:	f000 fafa 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <animacion_ojos+0x1e4>)
 8002186:	f000 f9a7 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(parp);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fe0a 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 8002190:	2000      	movs	r0, #0
 8002192:	f000 f97f 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_11,128,64,1);
 8002196:	2301      	movs	r3, #1
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	2340      	movs	r3, #64	; 0x40
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <animacion_ojos+0x20c>)
 80021a2:	2100      	movs	r1, #0
 80021a4:	2000      	movs	r0, #0
 80021a6:	f000 fae7 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 80021aa:	480f      	ldr	r0, [pc, #60]	; (80021e8 <animacion_ojos+0x1e4>)
 80021ac:	f000 f994 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(parp);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fdf7 	bl	8002da4 <HAL_Delay>

	ssd1306_Fill(0);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f000 f96c 	bl	8002494 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,ojos_12,128,64,1);
 80021bc:	2301      	movs	r3, #1
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	2340      	movs	r3, #64	; 0x40
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	4a13      	ldr	r2, [pc, #76]	; (8002214 <animacion_ojos+0x210>)
 80021c8:	2100      	movs	r1, #0
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 fad4 	bl	8002778 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen(&hi2c1);
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <animacion_ojos+0x1e4>)
 80021d2:	f000 f981 	bl	80024d8 <ssd1306_UpdateScreen>
	HAL_Delay(parp);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fde4 	bl	8002da4 <HAL_Delay>

}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	0800795c 	.word	0x0800795c
 80021e8:	20000548 	.word	0x20000548
 80021ec:	08007d5c 	.word	0x08007d5c
 80021f0:	0800815c 	.word	0x0800815c
 80021f4:	0800855c 	.word	0x0800855c
 80021f8:	0800895c 	.word	0x0800895c
 80021fc:	08008d5c 	.word	0x08008d5c
 8002200:	0800915c 	.word	0x0800915c
 8002204:	0800955c 	.word	0x0800955c
 8002208:	0800995c 	.word	0x0800995c
 800220c:	08009d5c 	.word	0x08009d5c
 8002210:	0800a15c 	.word	0x0800a15c
 8002214:	0800a55c 	.word	0x0800a55c

08002218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af04      	add	r7, sp, #16
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8002232:	230a      	movs	r3, #10
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	2301      	movs	r3, #1
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	1cfb      	adds	r3, r7, #3
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2301      	movs	r3, #1
 8002240:	2200      	movs	r2, #0
 8002242:	2178      	movs	r1, #120	; 0x78
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f002 fab3 	bl	80047b0 <HAL_I2C_Mem_Write>
 800224a:	4603      	mov	r3, r0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 800225c:	2064      	movs	r0, #100	; 0x64
 800225e:	f000 fda1 	bl	8002da4 <HAL_Delay>
    int status = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8002266:	21ae      	movs	r1, #174	; 0xae
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ffdc 	bl	8002226 <ssd1306_WriteCommand>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4413      	add	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8002278:	2120      	movs	r1, #32
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffd3 	bl	8002226 <ssd1306_WriteCommand>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800228a:	2110      	movs	r1, #16
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffca 	bl	8002226 <ssd1306_WriteCommand>
 8002292:	4603      	mov	r3, r0
 8002294:	461a      	mov	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4413      	add	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800229c:	21b0      	movs	r1, #176	; 0xb0
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffc1 	bl	8002226 <ssd1306_WriteCommand>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80022ae:	21c8      	movs	r1, #200	; 0xc8
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ffb8 	bl	8002226 <ssd1306_WriteCommand>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80022c0:	2100      	movs	r1, #0
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ffaf 	bl	8002226 <ssd1306_WriteCommand>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80022d2:	2110      	movs	r1, #16
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffa6 	bl	8002226 <ssd1306_WriteCommand>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4413      	add	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80022e4:	2140      	movs	r1, #64	; 0x40
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ff9d 	bl	8002226 <ssd1306_WriteCommand>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80022f6:	2181      	movs	r1, #129	; 0x81
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff94 	bl	8002226 <ssd1306_WriteCommand>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4413      	add	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8002308:	21ff      	movs	r1, #255	; 0xff
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ff8b 	bl	8002226 <ssd1306_WriteCommand>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800231a:	21a1      	movs	r1, #161	; 0xa1
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff82 	bl	8002226 <ssd1306_WriteCommand>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4413      	add	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 800232c:	21a6      	movs	r1, #166	; 0xa6
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ff79 	bl	8002226 <ssd1306_WriteCommand>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800233e:	21a8      	movs	r1, #168	; 0xa8
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff70 	bl	8002226 <ssd1306_WriteCommand>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x3F);
 8002350:	213f      	movs	r1, #63	; 0x3f
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ff67 	bl	8002226 <ssd1306_WriteCommand>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002362:	21a4      	movs	r1, #164	; 0xa4
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff5e 	bl	8002226 <ssd1306_WriteCommand>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4413      	add	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8002374:	21d3      	movs	r1, #211	; 0xd3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ff55 	bl	8002226 <ssd1306_WriteCommand>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8002386:	2100      	movs	r1, #0
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff4c 	bl	8002226 <ssd1306_WriteCommand>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4413      	add	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8002398:	21d5      	movs	r1, #213	; 0xd5
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ff43 	bl	8002226 <ssd1306_WriteCommand>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80023aa:	21f0      	movs	r1, #240	; 0xf0
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff3a 	bl	8002226 <ssd1306_WriteCommand>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4413      	add	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80023bc:	21d9      	movs	r1, #217	; 0xd9
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ff31 	bl	8002226 <ssd1306_WriteCommand>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80023ce:	2122      	movs	r1, #34	; 0x22
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff28 	bl	8002226 <ssd1306_WriteCommand>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4413      	add	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80023e0:	21da      	movs	r1, #218	; 0xda
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ff1f 	bl	8002226 <ssd1306_WriteCommand>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x12);
 80023f2:	2112      	movs	r1, #18
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff16 	bl	8002226 <ssd1306_WriteCommand>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4413      	add	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8002404:	21db      	movs	r1, #219	; 0xdb
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ff0d 	bl	8002226 <ssd1306_WriteCommand>
 800240c:	4603      	mov	r3, r0
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8002416:	2120      	movs	r1, #32
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff04 	bl	8002226 <ssd1306_WriteCommand>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4413      	add	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8002428:	218d      	movs	r1, #141	; 0x8d
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fefb 	bl	8002226 <ssd1306_WriteCommand>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800243a:	2114      	movs	r1, #20
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fef2 	bl	8002226 <ssd1306_WriteCommand>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 800244c:	21af      	movs	r1, #175	; 0xaf
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fee9 	bl	8002226 <ssd1306_WriteCommand>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <ssd1306_Init+0x214>
        return 1;
 8002464:	2301      	movs	r3, #1
 8002466:	e00f      	b.n	8002488 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8002468:	2000      	movs	r0, #0
 800246a:	f000 f813 	bl	8002494 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f832 	bl	80024d8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <ssd1306_Init+0x23c>)
 8002476:	2200      	movs	r2, #0
 8002478:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <ssd1306_Init+0x23c>)
 800247c:	2200      	movs	r2, #0
 800247e:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <ssd1306_Init+0x23c>)
 8002482:	2201      	movs	r2, #1
 8002484:	715a      	strb	r2, [r3, #5]

    return 0;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200004cc 	.word	0x200004cc

08002494 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e00d      	b.n	80024c0 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <ssd1306_Fill+0x1a>
 80024aa:	2100      	movs	r1, #0
 80024ac:	e000      	b.n	80024b0 <ssd1306_Fill+0x1c>
 80024ae:	21ff      	movs	r1, #255	; 0xff
 80024b0:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <ssd1306_Fill+0x40>)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	460a      	mov	r2, r1
 80024b8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d3ed      	bcc.n	80024a4 <ssd1306_Fill+0x10>
    }
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	200000cc 	.word	0x200000cc

080024d8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af04      	add	r7, sp, #16
 80024de:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e020      	b.n	8002528 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3b50      	subs	r3, #80	; 0x50
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff fe99 	bl	8002226 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80024f4:	2100      	movs	r1, #0
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff fe95 	bl	8002226 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80024fc:	2110      	movs	r1, #16
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fe91 	bl	8002226 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	01db      	lsls	r3, r3, #7
 8002508:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <ssd1306_UpdateScreen+0x60>)
 800250a:	4413      	add	r3, r2
 800250c:	2264      	movs	r2, #100	; 0x64
 800250e:	9202      	str	r2, [sp, #8]
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	9201      	str	r2, [sp, #4]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2301      	movs	r3, #1
 8002518:	2240      	movs	r2, #64	; 0x40
 800251a:	2178      	movs	r1, #120	; 0x78
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f002 f947 	bl	80047b0 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	3301      	adds	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2b07      	cmp	r3, #7
 800252c:	d9db      	bls.n	80024e6 <ssd1306_UpdateScreen+0xe>
    }
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200000cc 	.word	0x200000cc

0800253c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
 8002546:	460b      	mov	r3, r1
 8002548:	71bb      	strb	r3, [r7, #6]
 800254a:	4613      	mov	r3, r2
 800254c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	2b00      	cmp	r3, #0
 8002554:	db48      	blt.n	80025e8 <ssd1306_DrawPixel+0xac>
 8002556:	79bb      	ldrb	r3, [r7, #6]
 8002558:	2b3f      	cmp	r3, #63	; 0x3f
 800255a:	d845      	bhi.n	80025e8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <ssd1306_DrawPixel+0xb8>)
 800255e:	791b      	ldrb	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8002564:	797b      	ldrb	r3, [r7, #5]
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8002572:	797b      	ldrb	r3, [r7, #5]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d11a      	bne.n	80025ae <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002578:	79fa      	ldrb	r2, [r7, #7]
 800257a:	79bb      	ldrb	r3, [r7, #6]
 800257c:	08db      	lsrs	r3, r3, #3
 800257e:	b2d8      	uxtb	r0, r3
 8002580:	4603      	mov	r3, r0
 8002582:	01db      	lsls	r3, r3, #7
 8002584:	4413      	add	r3, r2
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <ssd1306_DrawPixel+0xbc>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	b25a      	sxtb	r2, r3
 800258c:	79bb      	ldrb	r3, [r7, #6]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	b25b      	sxtb	r3, r3
 800259a:	4313      	orrs	r3, r2
 800259c:	b259      	sxtb	r1, r3
 800259e:	79fa      	ldrb	r2, [r7, #7]
 80025a0:	4603      	mov	r3, r0
 80025a2:	01db      	lsls	r3, r3, #7
 80025a4:	4413      	add	r3, r2
 80025a6:	b2c9      	uxtb	r1, r1
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <ssd1306_DrawPixel+0xbc>)
 80025aa:	54d1      	strb	r1, [r2, r3]
 80025ac:	e01d      	b.n	80025ea <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	08db      	lsrs	r3, r3, #3
 80025b4:	b2d8      	uxtb	r0, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	01db      	lsls	r3, r3, #7
 80025ba:	4413      	add	r3, r2
 80025bc:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <ssd1306_DrawPixel+0xbc>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	b25a      	sxtb	r2, r3
 80025c2:	79bb      	ldrb	r3, [r7, #6]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	4013      	ands	r3, r2
 80025d6:	b259      	sxtb	r1, r3
 80025d8:	79fa      	ldrb	r2, [r7, #7]
 80025da:	4603      	mov	r3, r0
 80025dc:	01db      	lsls	r3, r3, #7
 80025de:	4413      	add	r3, r2
 80025e0:	b2c9      	uxtb	r1, r1
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <ssd1306_DrawPixel+0xbc>)
 80025e4:	54d1      	strb	r1, [r2, r3]
 80025e6:	e000      	b.n	80025ea <ssd1306_DrawPixel+0xae>
        return;
 80025e8:	bf00      	nop
    }
}
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	200004cc 	.word	0x200004cc
 80025f8:	200000cc 	.word	0x200000cc

080025fc <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	4604      	mov	r4, r0
 8002604:	1d38      	adds	r0, r7, #4
 8002606:	e880 0006 	stmia.w	r0, {r1, r2}
 800260a:	461a      	mov	r2, r3
 800260c:	4623      	mov	r3, r4
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	4613      	mov	r3, r2
 8002612:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002614:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <ssd1306_WriteChar+0xfc>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	793b      	ldrb	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	2b7f      	cmp	r3, #127	; 0x7f
 8002620:	dc06      	bgt.n	8002630 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002622:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <ssd1306_WriteChar+0xfc>)
 8002624:	885b      	ldrh	r3, [r3, #2]
 8002626:	461a      	mov	r2, r3
 8002628:	797b      	ldrb	r3, [r7, #5]
 800262a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800262c:	2b3f      	cmp	r3, #63	; 0x3f
 800262e:	dd01      	ble.n	8002634 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8002630:	2300      	movs	r3, #0
 8002632:	e05d      	b.n	80026f0 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	e04c      	b.n	80026d4 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	3b20      	subs	r3, #32
 8002640:	7979      	ldrb	r1, [r7, #5]
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4619      	mov	r1, r3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	440b      	add	r3, r1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8002654:	2300      	movs	r3, #0
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e034      	b.n	80026c4 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d012      	beq.n	8002690 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <ssd1306_WriteChar+0xfc>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	4413      	add	r3, r2
 8002676:	b2d8      	uxtb	r0, r3
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <ssd1306_WriteChar+0xfc>)
 800267a:	885b      	ldrh	r3, [r3, #2]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4413      	add	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	7bba      	ldrb	r2, [r7, #14]
 8002688:	4619      	mov	r1, r3
 800268a:	f7ff ff57 	bl	800253c <ssd1306_DrawPixel>
 800268e:	e016      	b.n	80026be <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <ssd1306_WriteChar+0xfc>)
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4413      	add	r3, r2
 800269c:	b2d8      	uxtb	r0, r3
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <ssd1306_WriteChar+0xfc>)
 80026a0:	885b      	ldrh	r3, [r3, #2]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	b2d9      	uxtb	r1, r3
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	f7ff ff3f 	bl	800253c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	793b      	ldrb	r3, [r7, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d3c5      	bcc.n	800265a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	797b      	ldrb	r3, [r7, #5]
 80026d6:	461a      	mov	r2, r3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	4293      	cmp	r3, r2
 80026dc:	d3ad      	bcc.n	800263a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <ssd1306_WriteChar+0xfc>)
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	793b      	ldrb	r3, [r7, #4]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <ssd1306_WriteChar+0xfc>)
 80026ec:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3724      	adds	r7, #36	; 0x24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	200004cc 	.word	0x200004cc

080026fc <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	1d38      	adds	r0, r7, #4
 8002706:	e880 0006 	stmia.w	r0, {r1, r2}
 800270a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 800270c:	e012      	b.n	8002734 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	7818      	ldrb	r0, [r3, #0]
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	1d3a      	adds	r2, r7, #4
 8002716:	ca06      	ldmia	r2, {r1, r2}
 8002718:	f7ff ff70 	bl	80025fc <ssd1306_WriteChar>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d002      	beq.n	800272e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	e008      	b.n	8002740 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3301      	adds	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
    while (*str)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e8      	bne.n	800270e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	781b      	ldrb	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	460a      	mov	r2, r1
 8002752:	71fb      	strb	r3, [r7, #7]
 8002754:	4613      	mov	r3, r2
 8002756:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	b29a      	uxth	r2, r3
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <ssd1306_SetCursor+0x2c>)
 800275e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002760:	79bb      	ldrb	r3, [r7, #6]
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <ssd1306_SetCursor+0x2c>)
 8002766:	805a      	strh	r2, [r3, #2]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	200004cc 	.word	0x200004cc

08002778 <ssd1306_DrawBitmap>:


void ssd1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60ba      	str	r2, [r7, #8]
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	81fb      	strh	r3, [r7, #14]
 8002786:	460b      	mov	r3, r1
 8002788:	81bb      	strh	r3, [r7, #12]
 800278a:	4613      	mov	r3, r2
 800278c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800278e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002792:	3307      	adds	r3, #7
 8002794:	2b00      	cmp	r3, #0
 8002796:	da00      	bge.n	800279a <ssd1306_DrawBitmap+0x22>
 8002798:	3307      	adds	r3, #7
 800279a:	10db      	asrs	r3, r3, #3
 800279c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	82bb      	strh	r3, [r7, #20]
 80027a6:	e047      	b.n	8002838 <ssd1306_DrawBitmap+0xc0>
    {
        for(int16_t i=0; i<w; i++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	827b      	strh	r3, [r7, #18]
 80027ac:	e032      	b.n	8002814 <ssd1306_DrawBitmap+0x9c>
        {
            if(i & 7)
 80027ae:	8a7b      	ldrh	r3, [r7, #18]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <ssd1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	75fb      	strb	r3, [r7, #23]
 80027be:	e012      	b.n	80027e6 <ssd1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80027c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027c4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80027c8:	fb02 f203 	mul.w	r2, r2, r3
 80027cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da00      	bge.n	80027d6 <ssd1306_DrawBitmap+0x5e>
 80027d4:	3307      	adds	r3, #7
 80027d6:	10db      	asrs	r3, r3, #3
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4413      	add	r3, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4413      	add	r3, r2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) ssd1306_DrawPixel(x+i, y, color);
 80027e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da0c      	bge.n	8002808 <ssd1306_DrawBitmap+0x90>
 80027ee:	89fb      	ldrh	r3, [r7, #14]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	8a7b      	ldrh	r3, [r7, #18]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	89ba      	ldrh	r2, [r7, #12]
 80027fc:	b2d1      	uxtb	r1, r2
 80027fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fe9a 	bl	800253c <ssd1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002808:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800280c:	b29b      	uxth	r3, r3
 800280e:	3301      	adds	r3, #1
 8002810:	b29b      	uxth	r3, r3
 8002812:	827b      	strh	r3, [r7, #18]
 8002814:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800281c:	429a      	cmp	r2, r3
 800281e:	dbc6      	blt.n	80027ae <ssd1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002820:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002824:	b29b      	uxth	r3, r3
 8002826:	3301      	adds	r3, #1
 8002828:	b29b      	uxth	r3, r3
 800282a:	82bb      	strh	r3, [r7, #20]
 800282c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002830:	b29b      	uxth	r3, r3
 8002832:	3301      	adds	r3, #1
 8002834:	b29b      	uxth	r3, r3
 8002836:	81bb      	strh	r3, [r7, #12]
 8002838:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800283c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002840:	429a      	cmp	r2, r3
 8002842:	dbb1      	blt.n	80027a8 <ssd1306_DrawBitmap+0x30>
        }
    }
}
 8002844:	bf00      	nop
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_MspInit+0x4c>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <HAL_MspInit+0x4c>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_MspInit+0x4c>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_MspInit+0x4c>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_MspInit+0x4c>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_MspInit+0x4c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800

0800289c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a33      	ldr	r2, [pc, #204]	; (8002988 <HAL_ADC_MspInit+0xec>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d15f      	bne.n	800297e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_ADC_MspInit+0xf0>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	4a31      	ldr	r2, [pc, #196]	; (800298c <HAL_ADC_MspInit+0xf0>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028cc:	6453      	str	r3, [r2, #68]	; 0x44
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_ADC_MspInit+0xf0>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_ADC_MspInit+0xf0>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a2a      	ldr	r2, [pc, #168]	; (800298c <HAL_ADC_MspInit+0xf0>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_ADC_MspInit+0xf0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028f6:	2302      	movs	r3, #2
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028fa:	2303      	movs	r3, #3
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4821      	ldr	r0, [pc, #132]	; (8002990 <HAL_ADC_MspInit+0xf4>)
 800290a:	f001 fc35 	bl	8004178 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800290e:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 8002910:	4a21      	ldr	r2, [pc, #132]	; (8002998 <HAL_ADC_MspInit+0xfc>)
 8002912:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002914:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 8002916:	2200      	movs	r2, #0
 8002918:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002920:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 8002928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800292c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800292e:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 8002930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002934:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 8002938:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800293c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 8002940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002944:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 800294e:	2200      	movs	r2, #0
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002952:	4810      	ldr	r0, [pc, #64]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 8002954:	f001 f8a2 	bl	8003a9c <HAL_DMA_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800295e:	f7ff fc5b 	bl	8002218 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_ADC_MspInit+0xf8>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	2012      	movs	r0, #18
 8002974:	f001 f85b 	bl	8003a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002978:	2012      	movs	r0, #18
 800297a:	f001 f874 	bl	8003a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800297e:	bf00      	nop
 8002980:	3728      	adds	r7, #40	; 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40012000 	.word	0x40012000
 800298c:	40023800 	.word	0x40023800
 8002990:	40020000 	.word	0x40020000
 8002994:	20000634 	.word	0x20000634
 8002998:	40026410 	.word	0x40026410

0800299c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_I2C_MspInit+0x84>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12b      	bne.n	8002a16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_I2C_MspInit+0x88>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_I2C_MspInit+0x88>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_I2C_MspInit+0x88>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029da:	23c0      	movs	r3, #192	; 0xc0
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029de:	2312      	movs	r3, #18
 80029e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e2:	2301      	movs	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029ea:	2304      	movs	r3, #4
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	480c      	ldr	r0, [pc, #48]	; (8002a28 <HAL_I2C_MspInit+0x8c>)
 80029f6:	f001 fbbf 	bl	8004178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_I2C_MspInit+0x88>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_I2C_MspInit+0x88>)
 8002a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_I2C_MspInit+0x88>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a16:	bf00      	nop
 8002a18:	3728      	adds	r7, #40	; 0x28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40005400 	.word	0x40005400
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020400 	.word	0x40020400

08002a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a31      	ldr	r2, [pc, #196]	; (8002b10 <HAL_TIM_Base_MspInit+0xe4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	4b30      	ldr	r3, [pc, #192]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a6a:	e04c      	b.n	8002b06 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d134      	bne.n	8002ae0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a25      	ldr	r2, [pc, #148]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002aae:	2340      	movs	r3, #64	; 0x40
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4814      	ldr	r0, [pc, #80]	; (8002b1c <HAL_TIM_Base_MspInit+0xf0>)
 8002aca:	f001 fb55 	bl	8004178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	201d      	movs	r0, #29
 8002ad4:	f000 ffab 	bl	8003a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ad8:	201d      	movs	r0, #29
 8002ada:	f000 ffc4 	bl	8003a66 <HAL_NVIC_EnableIRQ>
}
 8002ade:	e012      	b.n	8002b06 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <HAL_TIM_Base_MspInit+0xf4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10d      	bne.n	8002b06 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
}
 8002b06:	bf00      	nop
 8002b08:	3730      	adds	r7, #48	; 0x30
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40010000 	.word	0x40010000
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40000800 	.word	0x40000800

08002b24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <HAL_TIM_MspPostInit+0x68>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d11e      	bne.n	8002b84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_TIM_MspPostInit+0x6c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a10      	ldr	r2, [pc, #64]	; (8002b90 <HAL_TIM_MspPostInit+0x6c>)
 8002b50:	f043 0308 	orr.w	r3, r3, #8
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <HAL_TIM_MspPostInit+0x6c>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b74:	2302      	movs	r3, #2
 8002b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4805      	ldr	r0, [pc, #20]	; (8002b94 <HAL_TIM_MspPostInit+0x70>)
 8002b80:	f001 fafa 	bl	8004178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b84:	bf00      	nop
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40020c00 	.word	0x40020c00

08002b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002baa:	e7fe      	b.n	8002baa <HardFault_Handler+0x4>

08002bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <MemManage_Handler+0x4>

08002bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <BusFault_Handler+0x4>

08002bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <UsageFault_Handler+0x4>

08002bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bec:	f000 f8ba 	bl	8002d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f001 fc89 	bl	8004510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <ADC_IRQHandler+0x10>)
 8002c0a:	f000 f930 	bl	8002e6e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200005ec 	.word	0x200005ec

08002c18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <TIM3_IRQHandler+0x10>)
 8002c1e:	f002 fefd 	bl	8005a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200005ac 	.word	0x200005ac

08002c2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <DMA2_Stream0_IRQHandler+0x10>)
 8002c32:	f001 f839 	bl	8003ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000634 	.word	0x20000634

08002c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <SystemInit+0x28>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <SystemInit+0x28>)
 8002c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <SystemInit+0x28>)
 8002c56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c5a:	609a      	str	r2, [r3, #8]
#endif
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c72:	e003      	b.n	8002c7c <LoopCopyDataInit>

08002c74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c7a:	3104      	adds	r1, #4

08002c7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c7c:	480b      	ldr	r0, [pc, #44]	; (8002cac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c84:	d3f6      	bcc.n	8002c74 <CopyDataInit>
  ldr  r2, =_sbss
 8002c86:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c88:	e002      	b.n	8002c90 <LoopFillZerobss>

08002c8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c8c:	f842 3b04 	str.w	r3, [r2], #4

08002c90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c94:	d3f9      	bcc.n	8002c8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c96:	f7ff ffd3 	bl	8002c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9a:	f003 ff17 	bl	8006acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c9e:	f7fe fb29 	bl	80012f4 <main>
  bx  lr    
 8002ca2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ca4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ca8:	0800a98c 	.word	0x0800a98c
  ldr  r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cb0:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8002cb4:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8002cb8:	200006e0 	.word	0x200006e0

08002cbc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cbc:	e7fe      	b.n	8002cbc <CAN1_RX0_IRQHandler>
	...

08002cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_Init+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <HAL_Init+0x40>)
 8002cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_Init+0x40>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_Init+0x40>)
 8002cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <HAL_Init+0x40>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <HAL_Init+0x40>)
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce8:	2003      	movs	r0, #3
 8002cea:	f000 fe95 	bl	8003a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f000 f808 	bl	8002d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf4:	f7ff fdaa 	bl	800284c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023c00 	.word	0x40023c00

08002d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_InitTick+0x54>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_InitTick+0x58>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fead 	bl	8003a82 <HAL_SYSTICK_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00e      	b.n	8002d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b0f      	cmp	r3, #15
 8002d36:	d80a      	bhi.n	8002d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f000 fe75 	bl	8003a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <HAL_InitTick+0x5c>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e000      	b.n	8002d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	2000005c 	.word	0x2000005c
 8002d5c:	20000064 	.word	0x20000064
 8002d60:	20000060 	.word	0x20000060

08002d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_IncTick+0x20>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_IncTick+0x24>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4413      	add	r3, r2
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <HAL_IncTick+0x24>)
 8002d76:	6013      	str	r3, [r2, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000064 	.word	0x20000064
 8002d88:	200006dc 	.word	0x200006dc

08002d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_GetTick+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	200006dc 	.word	0x200006dc

08002da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff ffee 	bl	8002d8c <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d005      	beq.n	8002dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_Delay+0x40>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dca:	bf00      	nop
 8002dcc:	f7ff ffde 	bl	8002d8c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d8f7      	bhi.n	8002dcc <HAL_Delay+0x28>
  {
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000064 	.word	0x20000064

08002de8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e033      	b.n	8002e66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff fd48 	bl	800289c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d118      	bne.n	8002e58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e2e:	f023 0302 	bic.w	r3, r3, #2
 8002e32:	f043 0202 	orr.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fb94 	bl	8003568 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
 8002e56:	e001      	b.n	8002e5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d049      	beq.n	8002f44 <HAL_ADC_IRQHandler+0xd6>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d046      	beq.n	8002f44 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d12b      	bne.n	8002f34 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d127      	bne.n	8002f34 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d119      	bne.n	8002f34 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0220 	bic.w	r2, r2, #32
 8002f0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f9cd 	bl	80032d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0212 	mvn.w	r2, #18
 8002f42:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	2b80      	cmp	r3, #128	; 0x80
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d057      	beq.n	8003026 <HAL_ADC_IRQHandler+0x1b8>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d054      	beq.n	8003026 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d139      	bne.n	8003016 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d12b      	bne.n	8003016 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d124      	bne.n	8003016 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11d      	bne.n	8003016 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d119      	bne.n	8003016 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ff0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fc24 	bl	8003864 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 020c 	mvn.w	r2, #12
 8003024:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d017      	beq.n	8003088 <HAL_ADC_IRQHandler+0x21a>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d014      	beq.n	8003088 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10d      	bne.n	8003088 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f93f 	bl	80032fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0201 	mvn.w	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b20      	cmp	r3, #32
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d015      	beq.n	80030e8 <HAL_ADC_IRQHandler+0x27a>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f043 0202 	orr.w	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f06f 0220 	mvn.w	r2, #32
 80030d6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f919 	bl	8003310 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f06f 0220 	mvn.w	r2, #32
 80030e6:	601a      	str	r2, [r3, #0]
  }
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_ADC_Start_DMA+0x1e>
 800310a:	2302      	movs	r3, #2
 800310c:	e0cc      	b.n	80032a8 <HAL_ADC_Start_DMA+0x1b8>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d018      	beq.n	8003156 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003134:	4b5e      	ldr	r3, [pc, #376]	; (80032b0 <HAL_ADC_Start_DMA+0x1c0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5e      	ldr	r2, [pc, #376]	; (80032b4 <HAL_ADC_Start_DMA+0x1c4>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0c9a      	lsrs	r2, r3, #18
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003148:	e002      	b.n	8003150 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	3b01      	subs	r3, #1
 800314e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f9      	bne.n	800314a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	f040 80a0 	bne.w	80032a6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003190:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a4:	d106      	bne.n	80031b4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	f023 0206 	bic.w	r2, r3, #6
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	645a      	str	r2, [r3, #68]	; 0x44
 80031b2:	e002      	b.n	80031ba <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031c2:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_ADC_Start_DMA+0x1c8>)
 80031c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	4a3c      	ldr	r2, [pc, #240]	; (80032bc <HAL_ADC_Start_DMA+0x1cc>)
 80031cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	4a3b      	ldr	r2, [pc, #236]	; (80032c0 <HAL_ADC_Start_DMA+0x1d0>)
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	4a3a      	ldr	r2, [pc, #232]	; (80032c4 <HAL_ADC_Start_DMA+0x1d4>)
 80031dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003206:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	334c      	adds	r3, #76	; 0x4c
 8003212:	4619      	mov	r1, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f000 fcee 	bl	8003bf8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2b00      	cmp	r3, #0
 8003226:	d12a      	bne.n	800327e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a26      	ldr	r2, [pc, #152]	; (80032c8 <HAL_ADC_Start_DMA+0x1d8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d015      	beq.n	800325e <HAL_ADC_Start_DMA+0x16e>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a25      	ldr	r2, [pc, #148]	; (80032cc <HAL_ADC_Start_DMA+0x1dc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d105      	bne.n	8003248 <HAL_ADC_Start_DMA+0x158>
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_ADC_Start_DMA+0x1c8>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a20      	ldr	r2, [pc, #128]	; (80032d0 <HAL_ADC_Start_DMA+0x1e0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d129      	bne.n	80032a6 <HAL_ADC_Start_DMA+0x1b6>
 8003252:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_ADC_Start_DMA+0x1c8>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	2b0f      	cmp	r3, #15
 800325c:	d823      	bhi.n	80032a6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d11c      	bne.n	80032a6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	e013      	b.n	80032a6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <HAL_ADC_Start_DMA+0x1d8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10e      	bne.n	80032a6 <HAL_ADC_Start_DMA+0x1b6>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032a4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000005c 	.word	0x2000005c
 80032b4:	431bde83 	.word	0x431bde83
 80032b8:	40012300 	.word	0x40012300
 80032bc:	08003761 	.word	0x08003761
 80032c0:	0800381b 	.word	0x0800381b
 80032c4:	08003837 	.word	0x08003837
 80032c8:	40012000 	.word	0x40012000
 80032cc:	40012100 	.word	0x40012100
 80032d0:	40012200 	.word	0x40012200

080032d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x1c>
 800333c:	2302      	movs	r3, #2
 800333e:	e105      	b.n	800354c <HAL_ADC_ConfigChannel+0x228>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b09      	cmp	r3, #9
 800334e:	d925      	bls.n	800339c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	3b1e      	subs	r3, #30
 8003366:	2207      	movs	r2, #7
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43da      	mvns	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	400a      	ands	r2, r1
 8003374:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68d9      	ldr	r1, [r3, #12]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	4618      	mov	r0, r3
 8003388:	4603      	mov	r3, r0
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4403      	add	r3, r0
 800338e:	3b1e      	subs	r3, #30
 8003390:	409a      	lsls	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	e022      	b.n	80033e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6919      	ldr	r1, [r3, #16]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	2207      	movs	r2, #7
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	400a      	ands	r2, r1
 80033be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6919      	ldr	r1, [r3, #16]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	4618      	mov	r0, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4403      	add	r3, r0
 80033d8:	409a      	lsls	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d824      	bhi.n	8003434 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	3b05      	subs	r3, #5
 80033fc:	221f      	movs	r2, #31
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43da      	mvns	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	400a      	ands	r2, r1
 800340a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	4618      	mov	r0, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	3b05      	subs	r3, #5
 8003426:	fa00 f203 	lsl.w	r2, r0, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	635a      	str	r2, [r3, #52]	; 0x34
 8003432:	e04c      	b.n	80034ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b0c      	cmp	r3, #12
 800343a:	d824      	bhi.n	8003486 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	3b23      	subs	r3, #35	; 0x23
 800344e:	221f      	movs	r2, #31
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43da      	mvns	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	400a      	ands	r2, r1
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	4618      	mov	r0, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3b23      	subs	r3, #35	; 0x23
 8003478:	fa00 f203 	lsl.w	r2, r0, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
 8003484:	e023      	b.n	80034ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	3b41      	subs	r3, #65	; 0x41
 8003498:	221f      	movs	r2, #31
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	400a      	ands	r2, r1
 80034a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4618      	mov	r0, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	3b41      	subs	r3, #65	; 0x41
 80034c2:	fa00 f203 	lsl.w	r2, r0, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ce:	4b22      	ldr	r3, [pc, #136]	; (8003558 <HAL_ADC_ConfigChannel+0x234>)
 80034d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a21      	ldr	r2, [pc, #132]	; (800355c <HAL_ADC_ConfigChannel+0x238>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d109      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x1cc>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b12      	cmp	r3, #18
 80034e2:	d105      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a19      	ldr	r2, [pc, #100]	; (800355c <HAL_ADC_ConfigChannel+0x238>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d123      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x21e>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d003      	beq.n	800350a <HAL_ADC_ConfigChannel+0x1e6>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b11      	cmp	r3, #17
 8003508:	d11b      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b10      	cmp	r3, #16
 800351c:	d111      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_ADC_ConfigChannel+0x23c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a10      	ldr	r2, [pc, #64]	; (8003564 <HAL_ADC_ConfigChannel+0x240>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	0c9a      	lsrs	r2, r3, #18
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003534:	e002      	b.n	800353c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3b01      	subs	r3, #1
 800353a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f9      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40012300 	.word	0x40012300
 800355c:	40012000 	.word	0x40012000
 8003560:	2000005c 	.word	0x2000005c
 8003564:	431bde83 	.word	0x431bde83

08003568 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003570:	4b79      	ldr	r3, [pc, #484]	; (8003758 <ADC_Init+0x1f0>)
 8003572:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800359c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	021a      	lsls	r2, r3, #8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6899      	ldr	r1, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	4a58      	ldr	r2, [pc, #352]	; (800375c <ADC_Init+0x1f4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d022      	beq.n	8003646 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800360e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6899      	ldr	r1, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6899      	ldr	r1, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	e00f      	b.n	8003666 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003664:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0202 	bic.w	r2, r2, #2
 8003674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7e1b      	ldrb	r3, [r3, #24]
 8003680:	005a      	lsls	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01b      	beq.n	80036cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	3b01      	subs	r3, #1
 80036c0:	035a      	lsls	r2, r3, #13
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	e007      	b.n	80036dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	051a      	lsls	r2, r3, #20
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800371e:	025a      	lsls	r2, r3, #9
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6899      	ldr	r1, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	029a      	lsls	r2, r3, #10
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	40012300 	.word	0x40012300
 800375c:	0f000001 	.word	0x0f000001

08003760 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003776:	2b00      	cmp	r3, #0
 8003778:	d13c      	bne.n	80037f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d12b      	bne.n	80037ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003798:	2b00      	cmp	r3, #0
 800379a:	d127      	bne.n	80037ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d119      	bne.n	80037ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0220 	bic.w	r2, r2, #32
 80037c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7ff fd71 	bl	80032d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037f2:	e00e      	b.n	8003812 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff fd85 	bl	8003310 <HAL_ADC_ErrorCallback>
}
 8003806:	e004      	b.n	8003812 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff fd5d 	bl	80032e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2240      	movs	r2, #64	; 0x40
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f043 0204 	orr.w	r2, r3, #4
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff fd5a 	bl	8003310 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <__NVIC_SetPriorityGrouping+0x44>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003894:	4013      	ands	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038aa:	4a04      	ldr	r2, [pc, #16]	; (80038bc <__NVIC_SetPriorityGrouping+0x44>)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	60d3      	str	r3, [r2, #12]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <__NVIC_GetPriorityGrouping+0x18>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	f003 0307 	and.w	r3, r3, #7
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	db0b      	blt.n	8003906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	4907      	ldr	r1, [pc, #28]	; (8003914 <__NVIC_EnableIRQ+0x38>)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2001      	movs	r0, #1
 80038fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	e000e100 	.word	0xe000e100

08003918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	2b00      	cmp	r3, #0
 800392a:	db0a      	blt.n	8003942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	490c      	ldr	r1, [pc, #48]	; (8003964 <__NVIC_SetPriority+0x4c>)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	440b      	add	r3, r1
 800393c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003940:	e00a      	b.n	8003958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4908      	ldr	r1, [pc, #32]	; (8003968 <__NVIC_SetPriority+0x50>)
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	3b04      	subs	r3, #4
 8003950:	0112      	lsls	r2, r2, #4
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	440b      	add	r3, r1
 8003956:	761a      	strb	r2, [r3, #24]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000e100 	.word	0xe000e100
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	; 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f1c3 0307 	rsb	r3, r3, #7
 8003986:	2b04      	cmp	r3, #4
 8003988:	bf28      	it	cs
 800398a:	2304      	movcs	r3, #4
 800398c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3304      	adds	r3, #4
 8003992:	2b06      	cmp	r3, #6
 8003994:	d902      	bls.n	800399c <NVIC_EncodePriority+0x30>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3b03      	subs	r3, #3
 800399a:	e000      	b.n	800399e <NVIC_EncodePriority+0x32>
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	401a      	ands	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b4:	f04f 31ff 	mov.w	r1, #4294967295
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43d9      	mvns	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	4313      	orrs	r3, r2
         );
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e4:	d301      	bcc.n	80039ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00f      	b.n	8003a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ea:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <SysTick_Config+0x40>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f2:	210f      	movs	r1, #15
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	f7ff ff8e 	bl	8003918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <SysTick_Config+0x40>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <SysTick_Config+0x40>)
 8003a04:	2207      	movs	r2, #7
 8003a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff29 	bl	8003878 <__NVIC_SetPriorityGrouping>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b086      	sub	sp, #24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a40:	f7ff ff3e 	bl	80038c0 <__NVIC_GetPriorityGrouping>
 8003a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f7ff ff8e 	bl	800396c <NVIC_EncodePriority>
 8003a50:	4602      	mov	r2, r0
 8003a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff5d 	bl	8003918 <__NVIC_SetPriority>
}
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff31 	bl	80038dc <__NVIC_EnableIRQ>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff ffa2 	bl	80039d4 <SysTick_Config>
 8003a90:	4603      	mov	r3, r0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003aa8:	f7ff f970 	bl	8002d8c <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e099      	b.n	8003bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ad8:	e00f      	b.n	8003afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ada:	f7ff f957 	bl	8002d8c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	d908      	bls.n	8003afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2203      	movs	r2, #3
 8003af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e078      	b.n	8003bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e8      	bne.n	8003ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4b38      	ldr	r3, [pc, #224]	; (8003bf4 <HAL_DMA_Init+0x158>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d107      	bne.n	8003b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0307 	bic.w	r3, r3, #7
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d117      	bne.n	8003bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00e      	beq.n	8003bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fa6f 	bl	8004084 <DMA_CheckFifoParam>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2240      	movs	r2, #64	; 0x40
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e016      	b.n	8003bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa26 	bl	8004018 <DMA_CalcBaseAndBitshift>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd4:	223f      	movs	r2, #63	; 0x3f
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	f010803f 	.word	0xf010803f

08003bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_DMA_Start_IT+0x26>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e040      	b.n	8003ca0 <HAL_DMA_Start_IT+0xa8>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d12f      	bne.n	8003c92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f9b8 	bl	8003fbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	223f      	movs	r2, #63	; 0x3f
 8003c52:	409a      	lsls	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0216 	orr.w	r2, r2, #22
 8003c66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0208 	orr.w	r2, r2, #8
 8003c7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e005      	b.n	8003c9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cb4:	4b92      	ldr	r3, [pc, #584]	; (8003f00 <HAL_DMA_IRQHandler+0x258>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a92      	ldr	r2, [pc, #584]	; (8003f04 <HAL_DMA_IRQHandler+0x25c>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0a9b      	lsrs	r3, r3, #10
 8003cc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01a      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d013      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0204 	bic.w	r2, r2, #4
 8003cfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	2208      	movs	r2, #8
 8003d02:	409a      	lsls	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	f043 0201 	orr.w	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	2201      	movs	r2, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d012      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d36:	2201      	movs	r2, #1
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	f043 0202 	orr.w	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	2204      	movs	r2, #4
 8003d50:	409a      	lsls	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	f043 0204 	orr.w	r2, r3, #4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	2210      	movs	r2, #16
 8003d86:	409a      	lsls	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d043      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d03c      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	2210      	movs	r2, #16
 8003da4:	409a      	lsls	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d018      	beq.n	8003dea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d108      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d024      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
 8003dd6:	e01f      	b.n	8003e18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01b      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
 8003de8:	e016      	b.n	8003e18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0208 	bic.w	r2, r2, #8
 8003e06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 808e 	beq.w	8003f46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8086 	beq.w	8003f46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	2220      	movs	r2, #32
 8003e40:	409a      	lsls	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d136      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0216 	bic.w	r2, r2, #22
 8003e60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <HAL_DMA_IRQHandler+0x1da>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0208 	bic.w	r2, r2, #8
 8003e90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	223f      	movs	r2, #63	; 0x3f
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d07d      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
        }
        return;
 8003ebe:	e078      	b.n	8003fb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01c      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d108      	bne.n	8003eee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d030      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
 8003eec:	e02b      	b.n	8003f46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d027      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	4798      	blx	r3
 8003efe:	e022      	b.n	8003f46 <HAL_DMA_IRQHandler+0x29e>
 8003f00:	2000005c 	.word	0x2000005c
 8003f04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0210 	bic.w	r2, r2, #16
 8003f24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d032      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d022      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2205      	movs	r2, #5
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	3301      	adds	r3, #1
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d307      	bcc.n	8003f8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f2      	bne.n	8003f72 <HAL_DMA_IRQHandler+0x2ca>
 8003f8c:	e000      	b.n	8003f90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003f8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
 8003fb0:	e000      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003fb2:	bf00      	nop
    }
  }
}
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop

08003fbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d108      	bne.n	8003ffc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ffa:	e007      	b.n	800400c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	3b10      	subs	r3, #16
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <DMA_CalcBaseAndBitshift+0x64>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004032:	4a13      	ldr	r2, [pc, #76]	; (8004080 <DMA_CalcBaseAndBitshift+0x68>)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d909      	bls.n	800405a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	659a      	str	r2, [r3, #88]	; 0x58
 8004058:	e007      	b.n	800406a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	aaaaaaab 	.word	0xaaaaaaab
 8004080:	0800a974 	.word	0x0800a974

08004084 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d11f      	bne.n	80040de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d855      	bhi.n	8004150 <DMA_CheckFifoParam+0xcc>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <DMA_CheckFifoParam+0x28>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040bd 	.word	0x080040bd
 80040b0:	080040cf 	.word	0x080040cf
 80040b4:	080040bd 	.word	0x080040bd
 80040b8:	08004151 	.word	0x08004151
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d045      	beq.n	8004154 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040cc:	e042      	b.n	8004154 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040d6:	d13f      	bne.n	8004158 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040dc:	e03c      	b.n	8004158 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e6:	d121      	bne.n	800412c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d836      	bhi.n	800415c <DMA_CheckFifoParam+0xd8>
 80040ee:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <DMA_CheckFifoParam+0x70>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004105 	.word	0x08004105
 80040f8:	0800410b 	.word	0x0800410b
 80040fc:	08004105 	.word	0x08004105
 8004100:	0800411d 	.word	0x0800411d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
      break;
 8004108:	e02f      	b.n	800416a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d024      	beq.n	8004160 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411a:	e021      	b.n	8004160 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004124:	d11e      	bne.n	8004164 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800412a:	e01b      	b.n	8004164 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d902      	bls.n	8004138 <DMA_CheckFifoParam+0xb4>
 8004132:	2b03      	cmp	r3, #3
 8004134:	d003      	beq.n	800413e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004136:	e018      	b.n	800416a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      break;
 800413c:	e015      	b.n	800416a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00e      	beq.n	8004168 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
      break;
 800414e:	e00b      	b.n	8004168 <DMA_CheckFifoParam+0xe4>
      break;
 8004150:	bf00      	nop
 8004152:	e00a      	b.n	800416a <DMA_CheckFifoParam+0xe6>
      break;
 8004154:	bf00      	nop
 8004156:	e008      	b.n	800416a <DMA_CheckFifoParam+0xe6>
      break;
 8004158:	bf00      	nop
 800415a:	e006      	b.n	800416a <DMA_CheckFifoParam+0xe6>
      break;
 800415c:	bf00      	nop
 800415e:	e004      	b.n	800416a <DMA_CheckFifoParam+0xe6>
      break;
 8004160:	bf00      	nop
 8004162:	e002      	b.n	800416a <DMA_CheckFifoParam+0xe6>
      break;   
 8004164:	bf00      	nop
 8004166:	e000      	b.n	800416a <DMA_CheckFifoParam+0xe6>
      break;
 8004168:	bf00      	nop
    }
  } 
  
  return status; 
 800416a:	7bfb      	ldrb	r3, [r7, #15]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004178:	b480      	push	{r7}
 800417a:	b089      	sub	sp, #36	; 0x24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	e16b      	b.n	800446c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004194:	2201      	movs	r2, #1
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	f040 815a 	bne.w	8004466 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d00b      	beq.n	80041d2 <HAL_GPIO_Init+0x5a>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d007      	beq.n	80041d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041c6:	2b11      	cmp	r3, #17
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b12      	cmp	r3, #18
 80041d0:	d130      	bne.n	8004234 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004208:	2201      	movs	r2, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 0201 	and.w	r2, r3, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	2203      	movs	r2, #3
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4013      	ands	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0xfc>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b12      	cmp	r3, #18
 8004272:	d123      	bne.n	80042bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	08da      	lsrs	r2, r3, #3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3208      	adds	r2, #8
 800427c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	220f      	movs	r2, #15
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	08da      	lsrs	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3208      	adds	r2, #8
 80042b6:	69b9      	ldr	r1, [r7, #24]
 80042b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2203      	movs	r2, #3
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0203 	and.w	r2, r3, #3
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80b4 	beq.w	8004466 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	4b5f      	ldr	r3, [pc, #380]	; (8004480 <HAL_GPIO_Init+0x308>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	4a5e      	ldr	r2, [pc, #376]	; (8004480 <HAL_GPIO_Init+0x308>)
 8004308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800430c:	6453      	str	r3, [r2, #68]	; 0x44
 800430e:	4b5c      	ldr	r3, [pc, #368]	; (8004480 <HAL_GPIO_Init+0x308>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800431a:	4a5a      	ldr	r2, [pc, #360]	; (8004484 <HAL_GPIO_Init+0x30c>)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	089b      	lsrs	r3, r3, #2
 8004320:	3302      	adds	r3, #2
 8004322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	220f      	movs	r2, #15
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43db      	mvns	r3, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4013      	ands	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a51      	ldr	r2, [pc, #324]	; (8004488 <HAL_GPIO_Init+0x310>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d02b      	beq.n	800439e <HAL_GPIO_Init+0x226>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a50      	ldr	r2, [pc, #320]	; (800448c <HAL_GPIO_Init+0x314>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d025      	beq.n	800439a <HAL_GPIO_Init+0x222>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a4f      	ldr	r2, [pc, #316]	; (8004490 <HAL_GPIO_Init+0x318>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01f      	beq.n	8004396 <HAL_GPIO_Init+0x21e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a4e      	ldr	r2, [pc, #312]	; (8004494 <HAL_GPIO_Init+0x31c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d019      	beq.n	8004392 <HAL_GPIO_Init+0x21a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a4d      	ldr	r2, [pc, #308]	; (8004498 <HAL_GPIO_Init+0x320>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_GPIO_Init+0x216>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a4c      	ldr	r2, [pc, #304]	; (800449c <HAL_GPIO_Init+0x324>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00d      	beq.n	800438a <HAL_GPIO_Init+0x212>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a4b      	ldr	r2, [pc, #300]	; (80044a0 <HAL_GPIO_Init+0x328>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <HAL_GPIO_Init+0x20e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a4a      	ldr	r2, [pc, #296]	; (80044a4 <HAL_GPIO_Init+0x32c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <HAL_GPIO_Init+0x20a>
 800437e:	2307      	movs	r3, #7
 8004380:	e00e      	b.n	80043a0 <HAL_GPIO_Init+0x228>
 8004382:	2308      	movs	r3, #8
 8004384:	e00c      	b.n	80043a0 <HAL_GPIO_Init+0x228>
 8004386:	2306      	movs	r3, #6
 8004388:	e00a      	b.n	80043a0 <HAL_GPIO_Init+0x228>
 800438a:	2305      	movs	r3, #5
 800438c:	e008      	b.n	80043a0 <HAL_GPIO_Init+0x228>
 800438e:	2304      	movs	r3, #4
 8004390:	e006      	b.n	80043a0 <HAL_GPIO_Init+0x228>
 8004392:	2303      	movs	r3, #3
 8004394:	e004      	b.n	80043a0 <HAL_GPIO_Init+0x228>
 8004396:	2302      	movs	r3, #2
 8004398:	e002      	b.n	80043a0 <HAL_GPIO_Init+0x228>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_GPIO_Init+0x228>
 800439e:	2300      	movs	r3, #0
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	f002 0203 	and.w	r2, r2, #3
 80043a6:	0092      	lsls	r2, r2, #2
 80043a8:	4093      	lsls	r3, r2
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043b0:	4934      	ldr	r1, [pc, #208]	; (8004484 <HAL_GPIO_Init+0x30c>)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	089b      	lsrs	r3, r3, #2
 80043b6:	3302      	adds	r3, #2
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043be:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <HAL_GPIO_Init+0x330>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043e2:	4a31      	ldr	r2, [pc, #196]	; (80044a8 <HAL_GPIO_Init+0x330>)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043e8:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <HAL_GPIO_Init+0x330>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800440c:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <HAL_GPIO_Init+0x330>)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004412:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <HAL_GPIO_Init+0x330>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004436:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <HAL_GPIO_Init+0x330>)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <HAL_GPIO_Init+0x330>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004460:	4a11      	ldr	r2, [pc, #68]	; (80044a8 <HAL_GPIO_Init+0x330>)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b0f      	cmp	r3, #15
 8004470:	f67f ae90 	bls.w	8004194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004474:	bf00      	nop
 8004476:	3724      	adds	r7, #36	; 0x24
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40023800 	.word	0x40023800
 8004484:	40013800 	.word	0x40013800
 8004488:	40020000 	.word	0x40020000
 800448c:	40020400 	.word	0x40020400
 8004490:	40020800 	.word	0x40020800
 8004494:	40020c00 	.word	0x40020c00
 8004498:	40021000 	.word	0x40021000
 800449c:	40021400 	.word	0x40021400
 80044a0:	40021800 	.word	0x40021800
 80044a4:	40021c00 	.word	0x40021c00
 80044a8:	40013c00 	.word	0x40013c00

080044ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	887b      	ldrh	r3, [r7, #2]
 80044be:	4013      	ands	r3, r2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	e001      	b.n	80044ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
 80044e8:	4613      	mov	r3, r2
 80044ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044ec:	787b      	ldrb	r3, [r7, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044f8:	e003      	b.n	8004502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044fa:	887b      	ldrh	r3, [r7, #2]
 80044fc:	041a      	lsls	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	619a      	str	r2, [r3, #24]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	4013      	ands	r3, r2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004526:	4a05      	ldr	r2, [pc, #20]	; (800453c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fd fc74 	bl	8001e1c <HAL_GPIO_EXTI_Callback>
  }
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40013c00 	.word	0x40013c00

08004540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e11f      	b.n	8004792 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fe fa18 	bl	800299c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045a4:	f001 f856 	bl	8005654 <HAL_RCC_GetPCLK1Freq>
 80045a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4a7b      	ldr	r2, [pc, #492]	; (800479c <HAL_I2C_Init+0x25c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d807      	bhi.n	80045c4 <HAL_I2C_Init+0x84>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a7a      	ldr	r2, [pc, #488]	; (80047a0 <HAL_I2C_Init+0x260>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	bf94      	ite	ls
 80045bc:	2301      	movls	r3, #1
 80045be:	2300      	movhi	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e006      	b.n	80045d2 <HAL_I2C_Init+0x92>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4a77      	ldr	r2, [pc, #476]	; (80047a4 <HAL_I2C_Init+0x264>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	bf94      	ite	ls
 80045cc:	2301      	movls	r3, #1
 80045ce:	2300      	movhi	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0db      	b.n	8004792 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a72      	ldr	r2, [pc, #456]	; (80047a8 <HAL_I2C_Init+0x268>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	0c9b      	lsrs	r3, r3, #18
 80045e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4a64      	ldr	r2, [pc, #400]	; (800479c <HAL_I2C_Init+0x25c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d802      	bhi.n	8004614 <HAL_I2C_Init+0xd4>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	3301      	adds	r3, #1
 8004612:	e009      	b.n	8004628 <HAL_I2C_Init+0xe8>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	4a63      	ldr	r2, [pc, #396]	; (80047ac <HAL_I2C_Init+0x26c>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	3301      	adds	r3, #1
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	430b      	orrs	r3, r1
 800462e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800463a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4956      	ldr	r1, [pc, #344]	; (800479c <HAL_I2C_Init+0x25c>)
 8004644:	428b      	cmp	r3, r1
 8004646:	d80d      	bhi.n	8004664 <HAL_I2C_Init+0x124>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e59      	subs	r1, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	fbb1 f3f3 	udiv	r3, r1, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465c:	2b04      	cmp	r3, #4
 800465e:	bf38      	it	cc
 8004660:	2304      	movcc	r3, #4
 8004662:	e04f      	b.n	8004704 <HAL_I2C_Init+0x1c4>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d111      	bne.n	8004690 <HAL_I2C_Init+0x150>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1e58      	subs	r0, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e012      	b.n	80046b6 <HAL_I2C_Init+0x176>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1e58      	subs	r0, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	0099      	lsls	r1, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a6:	3301      	adds	r3, #1
 80046a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Init+0x17e>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e022      	b.n	8004704 <HAL_I2C_Init+0x1c4>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10e      	bne.n	80046e4 <HAL_I2C_Init+0x1a4>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e58      	subs	r0, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	440b      	add	r3, r1
 80046d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e2:	e00f      	b.n	8004704 <HAL_I2C_Init+0x1c4>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1e58      	subs	r0, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	0099      	lsls	r1, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	6809      	ldr	r1, [r1, #0]
 8004708:	4313      	orrs	r3, r2
 800470a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6911      	ldr	r1, [r2, #16]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68d2      	ldr	r2, [r2, #12]
 800473e:	4311      	orrs	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	430b      	orrs	r3, r1
 8004746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	000186a0 	.word	0x000186a0
 80047a0:	001e847f 	.word	0x001e847f
 80047a4:	003d08ff 	.word	0x003d08ff
 80047a8:	431bde83 	.word	0x431bde83
 80047ac:	10624dd3 	.word	0x10624dd3

080047b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	817b      	strh	r3, [r7, #10]
 80047c2:	460b      	mov	r3, r1
 80047c4:	813b      	strh	r3, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047ca:	f7fe fadf 	bl	8002d8c <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b20      	cmp	r3, #32
 80047da:	f040 80d9 	bne.w	8004990 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2319      	movs	r3, #25
 80047e4:	2201      	movs	r2, #1
 80047e6:	496d      	ldr	r1, [pc, #436]	; (800499c <HAL_I2C_Mem_Write+0x1ec>)
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f971 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
 80047f6:	e0cc      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_I2C_Mem_Write+0x56>
 8004802:	2302      	movs	r3, #2
 8004804:	e0c5      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d007      	beq.n	800482c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2221      	movs	r2, #33	; 0x21
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2240      	movs	r2, #64	; 0x40
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800485c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a4d      	ldr	r2, [pc, #308]	; (80049a0 <HAL_I2C_Mem_Write+0x1f0>)
 800486c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800486e:	88f8      	ldrh	r0, [r7, #6]
 8004870:	893a      	ldrh	r2, [r7, #8]
 8004872:	8979      	ldrh	r1, [r7, #10]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4603      	mov	r3, r0
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f890 	bl	80049a4 <I2C_RequestMemoryWrite>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d052      	beq.n	8004930 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e081      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f9f2 	bl	8004c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d107      	bne.n	80048b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e06b      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d11b      	bne.n	8004930 <HAL_I2C_Mem_Write+0x180>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d017      	beq.n	8004930 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1aa      	bne.n	800488e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f9de 	bl	8004cfe <I2C_WaitOnBTFFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00d      	beq.n	8004964 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	2b04      	cmp	r3, #4
 800494e:	d107      	bne.n	8004960 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e016      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e000      	b.n	8004992 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	00100002 	.word	0x00100002
 80049a0:	ffff0000 	.word	0xffff0000

080049a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	4608      	mov	r0, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	461a      	mov	r2, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	817b      	strh	r3, [r7, #10]
 80049b6:	460b      	mov	r3, r1
 80049b8:	813b      	strh	r3, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f878 	bl	8004ad0 <I2C_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f4:	d103      	bne.n	80049fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e05f      	b.n	8004ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a02:	897b      	ldrh	r3, [r7, #10]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	6a3a      	ldr	r2, [r7, #32]
 8004a16:	492d      	ldr	r1, [pc, #180]	; (8004acc <I2C_RequestMemoryWrite+0x128>)
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f8b0 	bl	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e04c      	b.n	8004ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	6a39      	ldr	r1, [r7, #32]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f91a 	bl	8004c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00d      	beq.n	8004a6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d107      	bne.n	8004a66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e02b      	b.n	8004ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d105      	bne.n	8004a7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a70:	893b      	ldrh	r3, [r7, #8]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	611a      	str	r2, [r3, #16]
 8004a7a:	e021      	b.n	8004ac0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a7c:	893b      	ldrh	r3, [r7, #8]
 8004a7e:	0a1b      	lsrs	r3, r3, #8
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8c:	6a39      	ldr	r1, [r7, #32]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f8f4 	bl	8004c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00d      	beq.n	8004ab6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d107      	bne.n	8004ab2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e005      	b.n	8004ac2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab6:	893b      	ldrh	r3, [r7, #8]
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	00010002 	.word	0x00010002

08004ad0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae0:	e025      	b.n	8004b2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d021      	beq.n	8004b2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fe f94f 	bl	8002d8c <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e023      	b.n	8004b76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d10d      	bne.n	8004b54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	e00c      	b.n	8004b6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d0b6      	beq.n	8004ae2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b8c:	e051      	b.n	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9c:	d123      	bne.n	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f043 0204 	orr.w	r2, r3, #4
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e046      	b.n	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d021      	beq.n	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fe f8cd 	bl	8002d8c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d116      	bne.n	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e020      	b.n	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d10c      	bne.n	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	43da      	mvns	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	e00b      	b.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	43da      	mvns	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4013      	ands	r3, r2
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf14      	ite	ne
 8004c68:	2301      	movne	r3, #1
 8004c6a:	2300      	moveq	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d18d      	bne.n	8004b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c88:	e02d      	b.n	8004ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f878 	bl	8004d80 <I2C_IsAcknowledgeFailed>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e02d      	b.n	8004cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d021      	beq.n	8004ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fe f873 	bl	8002d8c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d116      	bne.n	8004ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f043 0220 	orr.w	r2, r3, #32
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e007      	b.n	8004cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b80      	cmp	r3, #128	; 0x80
 8004cf2:	d1ca      	bne.n	8004c8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d0a:	e02d      	b.n	8004d68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f837 	bl	8004d80 <I2C_IsAcknowledgeFailed>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e02d      	b.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d021      	beq.n	8004d68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d24:	f7fe f832 	bl	8002d8c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d116      	bne.n	8004d68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e007      	b.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d1ca      	bne.n	8004d0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d96:	d11b      	bne.n	8004dd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004da0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f043 0204 	orr.w	r2, r3, #4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e25b      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d075      	beq.n	8004eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dfe:	4ba3      	ldr	r3, [pc, #652]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d00c      	beq.n	8004e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0a:	4ba0      	ldr	r3, [pc, #640]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d112      	bne.n	8004e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e16:	4b9d      	ldr	r3, [pc, #628]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e22:	d10b      	bne.n	8004e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e24:	4b99      	ldr	r3, [pc, #612]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d05b      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x108>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d157      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e236      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d106      	bne.n	8004e54 <HAL_RCC_OscConfig+0x74>
 8004e46:	4b91      	ldr	r3, [pc, #580]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a90      	ldr	r2, [pc, #576]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e01d      	b.n	8004e90 <HAL_RCC_OscConfig+0xb0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x98>
 8004e5e:	4b8b      	ldr	r3, [pc, #556]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a8a      	ldr	r2, [pc, #552]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b88      	ldr	r3, [pc, #544]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a87      	ldr	r2, [pc, #540]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0xb0>
 8004e78:	4b84      	ldr	r3, [pc, #528]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a83      	ldr	r2, [pc, #524]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b81      	ldr	r3, [pc, #516]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a80      	ldr	r2, [pc, #512]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fd ff78 	bl	8002d8c <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7fd ff74 	bl	8002d8c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	; 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e1fb      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	4b76      	ldr	r3, [pc, #472]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0xc0>
 8004ebe:	e014      	b.n	8004eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7fd ff64 	bl	8002d8c <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fd ff60 	bl	8002d8c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e1e7      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	4b6c      	ldr	r3, [pc, #432]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0xe8>
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d063      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ef6:	4b65      	ldr	r3, [pc, #404]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f02:	4b62      	ldr	r3, [pc, #392]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d11c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0e:	4b5f      	ldr	r3, [pc, #380]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d116      	bne.n	8004f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1a:	4b5c      	ldr	r3, [pc, #368]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_RCC_OscConfig+0x152>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e1bb      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f32:	4b56      	ldr	r3, [pc, #344]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4952      	ldr	r1, [pc, #328]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	e03a      	b.n	8004fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f50:	4b4f      	ldr	r3, [pc, #316]	; (8005090 <HAL_RCC_OscConfig+0x2b0>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f56:	f7fd ff19 	bl	8002d8c <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f5e:	f7fd ff15 	bl	8002d8c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e19c      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f70:	4b46      	ldr	r3, [pc, #280]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7c:	4b43      	ldr	r3, [pc, #268]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4940      	ldr	r1, [pc, #256]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]
 8004f90:	e015      	b.n	8004fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f92:	4b3f      	ldr	r3, [pc, #252]	; (8005090 <HAL_RCC_OscConfig+0x2b0>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fd fef8 	bl	8002d8c <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa0:	f7fd fef4 	bl	8002d8c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e17b      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb2:	4b36      	ldr	r3, [pc, #216]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d030      	beq.n	800502c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd2:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_RCC_OscConfig+0x2b4>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fed8 	bl	8002d8c <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe0:	f7fd fed4 	bl	8002d8c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e15b      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff2:	4b26      	ldr	r3, [pc, #152]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x200>
 8004ffe:	e015      	b.n	800502c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <HAL_RCC_OscConfig+0x2b4>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005006:	f7fd fec1 	bl	8002d8c <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800500e:	f7fd febd 	bl	8002d8c <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e144      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f0      	bne.n	800500e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80a0 	beq.w	800517a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	4b0f      	ldr	r3, [pc, #60]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	4a0e      	ldr	r2, [pc, #56]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005058:	6413      	str	r3, [r2, #64]	; 0x40
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_RCC_OscConfig+0x2b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d121      	bne.n	80050ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <HAL_RCC_OscConfig+0x2b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a07      	ldr	r2, [pc, #28]	; (8005098 <HAL_RCC_OscConfig+0x2b8>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005082:	f7fd fe83 	bl	8002d8c <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005088:	e011      	b.n	80050ae <HAL_RCC_OscConfig+0x2ce>
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	42470000 	.word	0x42470000
 8005094:	42470e80 	.word	0x42470e80
 8005098:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509c:	f7fd fe76 	bl	8002d8c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0fd      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	4b81      	ldr	r3, [pc, #516]	; (80052b4 <HAL_RCC_OscConfig+0x4d4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d106      	bne.n	80050d0 <HAL_RCC_OscConfig+0x2f0>
 80050c2:	4b7d      	ldr	r3, [pc, #500]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	4a7c      	ldr	r2, [pc, #496]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	6713      	str	r3, [r2, #112]	; 0x70
 80050ce:	e01c      	b.n	800510a <HAL_RCC_OscConfig+0x32a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCC_OscConfig+0x312>
 80050d8:	4b77      	ldr	r3, [pc, #476]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a76      	ldr	r2, [pc, #472]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050de:	f043 0304 	orr.w	r3, r3, #4
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
 80050e4:	4b74      	ldr	r3, [pc, #464]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a73      	ldr	r2, [pc, #460]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
 80050f0:	e00b      	b.n	800510a <HAL_RCC_OscConfig+0x32a>
 80050f2:	4b71      	ldr	r3, [pc, #452]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a70      	ldr	r2, [pc, #448]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
 80050fe:	4b6e      	ldr	r3, [pc, #440]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	4a6d      	ldr	r2, [pc, #436]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005104:	f023 0304 	bic.w	r3, r3, #4
 8005108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d015      	beq.n	800513e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fd fe3b 	bl	8002d8c <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	e00a      	b.n	8005130 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fd fe37 	bl	8002d8c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e0bc      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005130:	4b61      	ldr	r3, [pc, #388]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ee      	beq.n	800511a <HAL_RCC_OscConfig+0x33a>
 800513c:	e014      	b.n	8005168 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513e:	f7fd fe25 	bl	8002d8c <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005144:	e00a      	b.n	800515c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7fd fe21 	bl	8002d8c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	; 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e0a6      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515c:	4b56      	ldr	r3, [pc, #344]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ee      	bne.n	8005146 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800516e:	4b52      	ldr	r3, [pc, #328]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	4a51      	ldr	r2, [pc, #324]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8092 	beq.w	80052a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005184:	4b4c      	ldr	r3, [pc, #304]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b08      	cmp	r3, #8
 800518e:	d05c      	beq.n	800524a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d141      	bne.n	800521c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b48      	ldr	r3, [pc, #288]	; (80052bc <HAL_RCC_OscConfig+0x4dc>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7fd fdf5 	bl	8002d8c <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a6:	f7fd fdf1 	bl	8002d8c <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e078      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b8:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	019b      	lsls	r3, r3, #6
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	3b01      	subs	r3, #1
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	4933      	ldr	r1, [pc, #204]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ee:	4b33      	ldr	r3, [pc, #204]	; (80052bc <HAL_RCC_OscConfig+0x4dc>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fd fdca 	bl	8002d8c <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fd fdc6 	bl	8002d8c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e04d      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x41c>
 800521a:	e045      	b.n	80052a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521c:	4b27      	ldr	r3, [pc, #156]	; (80052bc <HAL_RCC_OscConfig+0x4dc>)
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fd fdb3 	bl	8002d8c <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522a:	f7fd fdaf 	bl	8002d8c <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e036      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523c:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f0      	bne.n	800522a <HAL_RCC_OscConfig+0x44a>
 8005248:	e02e      	b.n	80052a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e029      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005256:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_RCC_OscConfig+0x4d8>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	429a      	cmp	r2, r3
 8005268:	d11c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d115      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800527e:	4013      	ands	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005284:	4293      	cmp	r3, r2
 8005286:	d10d      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d106      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d001      	beq.n	80052a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40007000 	.word	0x40007000
 80052b8:	40023800 	.word	0x40023800
 80052bc:	42470060 	.word	0x42470060

080052c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0cc      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d4:	4b68      	ldr	r3, [pc, #416]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d90c      	bls.n	80052fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e2:	4b65      	ldr	r3, [pc, #404]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b63      	ldr	r3, [pc, #396]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0b8      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d020      	beq.n	800534a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005314:	4b59      	ldr	r3, [pc, #356]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4a58      	ldr	r2, [pc, #352]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800531e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800532c:	4b53      	ldr	r3, [pc, #332]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	4a52      	ldr	r2, [pc, #328]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005338:	4b50      	ldr	r3, [pc, #320]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	494d      	ldr	r1, [pc, #308]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	4313      	orrs	r3, r2
 8005348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d044      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d107      	bne.n	800536e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535e:	4b47      	ldr	r3, [pc, #284]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d119      	bne.n	800539e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e07f      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d003      	beq.n	800537e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800537a:	2b03      	cmp	r3, #3
 800537c:	d107      	bne.n	800538e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537e:	4b3f      	ldr	r3, [pc, #252]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d109      	bne.n	800539e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e06f      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538e:	4b3b      	ldr	r3, [pc, #236]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e067      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800539e:	4b37      	ldr	r3, [pc, #220]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f023 0203 	bic.w	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4934      	ldr	r1, [pc, #208]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b0:	f7fd fcec 	bl	8002d8c <HAL_GetTick>
 80053b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b6:	e00a      	b.n	80053ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b8:	f7fd fce8 	bl	8002d8c <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e04f      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ce:	4b2b      	ldr	r3, [pc, #172]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 020c 	and.w	r2, r3, #12
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	429a      	cmp	r2, r3
 80053de:	d1eb      	bne.n	80053b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e0:	4b25      	ldr	r3, [pc, #148]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d20c      	bcs.n	8005408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ee:	4b22      	ldr	r3, [pc, #136]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f6:	4b20      	ldr	r3, [pc, #128]	; (8005478 <HAL_RCC_ClockConfig+0x1b8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e032      	b.n	800546e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005414:	4b19      	ldr	r3, [pc, #100]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4916      	ldr	r1, [pc, #88]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	4313      	orrs	r3, r2
 8005424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005432:	4b12      	ldr	r3, [pc, #72]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	490e      	ldr	r1, [pc, #56]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005446:	f000 f821 	bl	800548c <HAL_RCC_GetSysClockFreq>
 800544a:	4601      	mov	r1, r0
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <HAL_RCC_ClockConfig+0x1c0>)
 8005458:	5cd3      	ldrb	r3, [r2, r3]
 800545a:	fa21 f303 	lsr.w	r3, r1, r3
 800545e:	4a09      	ldr	r2, [pc, #36]	; (8005484 <HAL_RCC_ClockConfig+0x1c4>)
 8005460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f7fd fc4c 	bl	8002d04 <HAL_InitTick>

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40023c00 	.word	0x40023c00
 800547c:	40023800 	.word	0x40023800
 8005480:	0800a95c 	.word	0x0800a95c
 8005484:	2000005c 	.word	0x2000005c
 8005488:	20000060 	.word	0x20000060

0800548c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800548c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	2300      	movs	r3, #0
 800549c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054a2:	4b63      	ldr	r3, [pc, #396]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d007      	beq.n	80054be <HAL_RCC_GetSysClockFreq+0x32>
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d008      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0x38>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 80b4 	bne.w	8005620 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054b8:	4b5e      	ldr	r3, [pc, #376]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054ba:	60bb      	str	r3, [r7, #8]
       break;
 80054bc:	e0b3      	b.n	8005626 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054be:	4b5e      	ldr	r3, [pc, #376]	; (8005638 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80054c0:	60bb      	str	r3, [r7, #8]
      break;
 80054c2:	e0b0      	b.n	8005626 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c4:	4b5a      	ldr	r3, [pc, #360]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ce:	4b58      	ldr	r3, [pc, #352]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d04a      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054da:	4b55      	ldr	r3, [pc, #340]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	099b      	lsrs	r3, r3, #6
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	ea03 0501 	and.w	r5, r3, r1
 80054f0:	ea04 0602 	and.w	r6, r4, r2
 80054f4:	4629      	mov	r1, r5
 80054f6:	4632      	mov	r2, r6
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	f04f 0400 	mov.w	r4, #0
 8005500:	0154      	lsls	r4, r2, #5
 8005502:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005506:	014b      	lsls	r3, r1, #5
 8005508:	4619      	mov	r1, r3
 800550a:	4622      	mov	r2, r4
 800550c:	1b49      	subs	r1, r1, r5
 800550e:	eb62 0206 	sbc.w	r2, r2, r6
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	f04f 0400 	mov.w	r4, #0
 800551a:	0194      	lsls	r4, r2, #6
 800551c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005520:	018b      	lsls	r3, r1, #6
 8005522:	1a5b      	subs	r3, r3, r1
 8005524:	eb64 0402 	sbc.w	r4, r4, r2
 8005528:	f04f 0100 	mov.w	r1, #0
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	00e2      	lsls	r2, r4, #3
 8005532:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005536:	00d9      	lsls	r1, r3, #3
 8005538:	460b      	mov	r3, r1
 800553a:	4614      	mov	r4, r2
 800553c:	195b      	adds	r3, r3, r5
 800553e:	eb44 0406 	adc.w	r4, r4, r6
 8005542:	f04f 0100 	mov.w	r1, #0
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	0262      	lsls	r2, r4, #9
 800554c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005550:	0259      	lsls	r1, r3, #9
 8005552:	460b      	mov	r3, r1
 8005554:	4614      	mov	r4, r2
 8005556:	4618      	mov	r0, r3
 8005558:	4621      	mov	r1, r4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f04f 0400 	mov.w	r4, #0
 8005560:	461a      	mov	r2, r3
 8005562:	4623      	mov	r3, r4
 8005564:	f7fb fa58 	bl	8000a18 <__aeabi_uldivmod>
 8005568:	4603      	mov	r3, r0
 800556a:	460c      	mov	r4, r1
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	e049      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005570:	4b2f      	ldr	r3, [pc, #188]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	099b      	lsrs	r3, r3, #6
 8005576:	f04f 0400 	mov.w	r4, #0
 800557a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	ea03 0501 	and.w	r5, r3, r1
 8005586:	ea04 0602 	and.w	r6, r4, r2
 800558a:	4629      	mov	r1, r5
 800558c:	4632      	mov	r2, r6
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	f04f 0400 	mov.w	r4, #0
 8005596:	0154      	lsls	r4, r2, #5
 8005598:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800559c:	014b      	lsls	r3, r1, #5
 800559e:	4619      	mov	r1, r3
 80055a0:	4622      	mov	r2, r4
 80055a2:	1b49      	subs	r1, r1, r5
 80055a4:	eb62 0206 	sbc.w	r2, r2, r6
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	f04f 0400 	mov.w	r4, #0
 80055b0:	0194      	lsls	r4, r2, #6
 80055b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055b6:	018b      	lsls	r3, r1, #6
 80055b8:	1a5b      	subs	r3, r3, r1
 80055ba:	eb64 0402 	sbc.w	r4, r4, r2
 80055be:	f04f 0100 	mov.w	r1, #0
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	00e2      	lsls	r2, r4, #3
 80055c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055cc:	00d9      	lsls	r1, r3, #3
 80055ce:	460b      	mov	r3, r1
 80055d0:	4614      	mov	r4, r2
 80055d2:	195b      	adds	r3, r3, r5
 80055d4:	eb44 0406 	adc.w	r4, r4, r6
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	02a2      	lsls	r2, r4, #10
 80055e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80055e6:	0299      	lsls	r1, r3, #10
 80055e8:	460b      	mov	r3, r1
 80055ea:	4614      	mov	r4, r2
 80055ec:	4618      	mov	r0, r3
 80055ee:	4621      	mov	r1, r4
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f04f 0400 	mov.w	r4, #0
 80055f6:	461a      	mov	r2, r3
 80055f8:	4623      	mov	r3, r4
 80055fa:	f7fb fa0d 	bl	8000a18 <__aeabi_uldivmod>
 80055fe:	4603      	mov	r3, r0
 8005600:	460c      	mov	r4, r1
 8005602:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	3301      	adds	r3, #1
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	fbb2 f3f3 	udiv	r3, r2, r3
 800561c:	60bb      	str	r3, [r7, #8]
      break;
 800561e:	e002      	b.n	8005626 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005620:	4b04      	ldr	r3, [pc, #16]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005622:	60bb      	str	r3, [r7, #8]
      break;
 8005624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005626:	68bb      	ldr	r3, [r7, #8]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005630:	40023800 	.word	0x40023800
 8005634:	00f42400 	.word	0x00f42400
 8005638:	007a1200 	.word	0x007a1200

0800563c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005640:	4b03      	ldr	r3, [pc, #12]	; (8005650 <HAL_RCC_GetHCLKFreq+0x14>)
 8005642:	681b      	ldr	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	2000005c 	.word	0x2000005c

08005654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005658:	f7ff fff0 	bl	800563c <HAL_RCC_GetHCLKFreq>
 800565c:	4601      	mov	r1, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0a9b      	lsrs	r3, r3, #10
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4a03      	ldr	r2, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800566a:	5cd3      	ldrb	r3, [r2, r3]
 800566c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	0800a96c 	.word	0x0800a96c

0800567c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e01d      	b.n	80056ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fd f9c2 	bl	8002a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f000 fd3c 	bl	8006138 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b085      	sub	sp, #20
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b06      	cmp	r3, #6
 80056f2:	d007      	beq.n	8005704 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e01d      	b.n	8005768 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f815 	bl	8005770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2202      	movs	r2, #2
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f000 fced 	bl	8006138 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2201      	movs	r2, #1
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f001 f8e2 	bl	8006960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <HAL_TIM_PWM_Start+0x74>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <HAL_TIM_PWM_Start+0x2c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a14      	ldr	r2, [pc, #80]	; (80057fc <HAL_TIM_PWM_Start+0x78>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d101      	bne.n	80057b4 <HAL_TIM_PWM_Start+0x30>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <HAL_TIM_PWM_Start+0x32>
 80057b4:	2300      	movs	r3, #0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b06      	cmp	r3, #6
 80057da:	d007      	beq.n	80057ec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40010400 	.word	0x40010400

08005800 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e01d      	b.n	800584e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f815 	bl	8005856 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f000 fc7a 	bl	8006138 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b0c      	cmp	r3, #12
 800587a:	d841      	bhi.n	8005900 <HAL_TIM_IC_Start_IT+0x94>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <HAL_TIM_IC_Start_IT+0x18>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058b9 	.word	0x080058b9
 8005888:	08005901 	.word	0x08005901
 800588c:	08005901 	.word	0x08005901
 8005890:	08005901 	.word	0x08005901
 8005894:	080058cb 	.word	0x080058cb
 8005898:	08005901 	.word	0x08005901
 800589c:	08005901 	.word	0x08005901
 80058a0:	08005901 	.word	0x08005901
 80058a4:	080058dd 	.word	0x080058dd
 80058a8:	08005901 	.word	0x08005901
 80058ac:	08005901 	.word	0x08005901
 80058b0:	08005901 	.word	0x08005901
 80058b4:	080058ef 	.word	0x080058ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0202 	orr.w	r2, r2, #2
 80058c6:	60da      	str	r2, [r3, #12]
      break;
 80058c8:	e01b      	b.n	8005902 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0204 	orr.w	r2, r2, #4
 80058d8:	60da      	str	r2, [r3, #12]
      break;
 80058da:	e012      	b.n	8005902 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0208 	orr.w	r2, r2, #8
 80058ea:	60da      	str	r2, [r3, #12]
      break;
 80058ec:	e009      	b.n	8005902 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0210 	orr.w	r2, r2, #16
 80058fc:	60da      	str	r2, [r3, #12]
      break;
 80058fe:	e000      	b.n	8005902 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005900:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2201      	movs	r2, #1
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f001 f828 	bl	8006960 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b06      	cmp	r3, #6
 8005920:	d007      	beq.n	8005932 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0201 	orr.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b0c      	cmp	r3, #12
 800594a:	d841      	bhi.n	80059d0 <HAL_TIM_IC_Stop_IT+0x94>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <HAL_TIM_IC_Stop_IT+0x18>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005989 	.word	0x08005989
 8005958:	080059d1 	.word	0x080059d1
 800595c:	080059d1 	.word	0x080059d1
 8005960:	080059d1 	.word	0x080059d1
 8005964:	0800599b 	.word	0x0800599b
 8005968:	080059d1 	.word	0x080059d1
 800596c:	080059d1 	.word	0x080059d1
 8005970:	080059d1 	.word	0x080059d1
 8005974:	080059ad 	.word	0x080059ad
 8005978:	080059d1 	.word	0x080059d1
 800597c:	080059d1 	.word	0x080059d1
 8005980:	080059d1 	.word	0x080059d1
 8005984:	080059bf 	.word	0x080059bf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0202 	bic.w	r2, r2, #2
 8005996:	60da      	str	r2, [r3, #12]
      break;
 8005998:	e01b      	b.n	80059d2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0204 	bic.w	r2, r2, #4
 80059a8:	60da      	str	r2, [r3, #12]
      break;
 80059aa:	e012      	b.n	80059d2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0208 	bic.w	r2, r2, #8
 80059ba:	60da      	str	r2, [r3, #12]
      break;
 80059bc:	e009      	b.n	80059d2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0210 	bic.w	r2, r2, #16
 80059cc:	60da      	str	r2, [r3, #12]
      break;
 80059ce:	e000      	b.n	80059d2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 80059d0:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2200      	movs	r2, #0
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 ffc0 	bl	8006960 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a1a      	ldr	r2, [r3, #32]
 80059e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10f      	bne.n	8005a10 <HAL_TIM_IC_Stop_IT+0xd4>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6a1a      	ldr	r2, [r3, #32]
 80059f6:	f240 4344 	movw	r3, #1092	; 0x444
 80059fa:	4013      	ands	r3, r2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d107      	bne.n	8005a10 <HAL_TIM_IC_Stop_IT+0xd4>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop

08005a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d122      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d11b      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0202 	mvn.w	r2, #2
 8005a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fc fa1e 	bl	8001ea0 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fb48 	bl	80060fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fb4f 	bl	8006110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d122      	bne.n	8005acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0204 	mvn.w	r2, #4
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fc f9f4 	bl	8001ea0 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fb1e 	bl	80060fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fb25 	bl	8006110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d122      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d11b      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0208 	mvn.w	r2, #8
 8005af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fc f9ca 	bl	8001ea0 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 faf4 	bl	80060fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fafb 	bl	8006110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b10      	cmp	r3, #16
 8005b2c:	d122      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d11b      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0210 	mvn.w	r2, #16
 8005b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2208      	movs	r2, #8
 8005b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fc f9a0 	bl	8001ea0 <HAL_TIM_IC_CaptureCallback>
 8005b60:	e005      	b.n	8005b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 faca 	bl	80060fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fad1 	bl	8006110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d10e      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d107      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0201 	mvn.w	r2, #1
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 faa4 	bl	80060e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005baa:	2b80      	cmp	r3, #128	; 0x80
 8005bac:	d10e      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb8:	2b80      	cmp	r3, #128	; 0x80
 8005bba:	d107      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 ff76 	bl	8006ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b40      	cmp	r3, #64	; 0x40
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d107      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa96 	bl	8006124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d10e      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d107      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0220 	mvn.w	r2, #32
 8005c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 ff40 	bl	8006aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e08a      	b.n	8005d5c <HAL_TIM_IC_ConfigChannel+0x130>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d11b      	bne.n	8005c94 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f000 fcb4 	bl	80065d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 020c 	bic.w	r2, r2, #12
 8005c7e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6999      	ldr	r1, [r3, #24]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	619a      	str	r2, [r3, #24]
 8005c92:	e05a      	b.n	8005d4a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d11c      	bne.n	8005cd4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f000 fd38 	bl	800671e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cbc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6999      	ldr	r1, [r3, #24]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	021a      	lsls	r2, r3, #8
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	619a      	str	r2, [r3, #24]
 8005cd2:	e03a      	b.n	8005d4a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d11b      	bne.n	8005d12 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6819      	ldr	r1, [r3, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f000 fd85 	bl	80067f8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 020c 	bic.w	r2, r2, #12
 8005cfc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69d9      	ldr	r1, [r3, #28]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	61da      	str	r2, [r3, #28]
 8005d10:	e01b      	b.n	8005d4a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6819      	ldr	r1, [r3, #0]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f000 fda5 	bl	8006870 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d34:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69d9      	ldr	r1, [r3, #28]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	021a      	lsls	r2, r3, #8
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e0b4      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	f200 809f 	bhi.w	8005ed4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005d96:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005dd1 	.word	0x08005dd1
 8005da0:	08005ed5 	.word	0x08005ed5
 8005da4:	08005ed5 	.word	0x08005ed5
 8005da8:	08005ed5 	.word	0x08005ed5
 8005dac:	08005e11 	.word	0x08005e11
 8005db0:	08005ed5 	.word	0x08005ed5
 8005db4:	08005ed5 	.word	0x08005ed5
 8005db8:	08005ed5 	.word	0x08005ed5
 8005dbc:	08005e53 	.word	0x08005e53
 8005dc0:	08005ed5 	.word	0x08005ed5
 8005dc4:	08005ed5 	.word	0x08005ed5
 8005dc8:	08005ed5 	.word	0x08005ed5
 8005dcc:	08005e93 	.word	0x08005e93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fa4e 	bl	8006278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0208 	orr.w	r2, r2, #8
 8005dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0204 	bic.w	r2, r2, #4
 8005dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6999      	ldr	r1, [r3, #24]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	619a      	str	r2, [r3, #24]
      break;
 8005e0e:	e062      	b.n	8005ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fa9e 	bl	8006358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6999      	ldr	r1, [r3, #24]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	021a      	lsls	r2, r3, #8
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	619a      	str	r2, [r3, #24]
      break;
 8005e50:	e041      	b.n	8005ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 faf3 	bl	8006444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0208 	orr.w	r2, r2, #8
 8005e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0204 	bic.w	r2, r2, #4
 8005e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69d9      	ldr	r1, [r3, #28]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	61da      	str	r2, [r3, #28]
      break;
 8005e90:	e021      	b.n	8005ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fb47 	bl	800652c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69d9      	ldr	r1, [r3, #28]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	021a      	lsls	r2, r3, #8
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	61da      	str	r2, [r3, #28]
      break;
 8005ed2:	e000      	b.n	8005ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005ed4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_TIM_ConfigClockSource+0x18>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e0a6      	b.n	8006056 <HAL_TIM_ConfigClockSource+0x166>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d067      	beq.n	8006010 <HAL_TIM_ConfigClockSource+0x120>
 8005f40:	2b40      	cmp	r3, #64	; 0x40
 8005f42:	d80b      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x6c>
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d073      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0x140>
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d802      	bhi.n	8005f52 <HAL_TIM_ConfigClockSource+0x62>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d06f      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005f50:	e078      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d06c      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0x140>
 8005f56:	2b30      	cmp	r3, #48	; 0x30
 8005f58:	d06a      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005f5a:	e073      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f5c:	2b70      	cmp	r3, #112	; 0x70
 8005f5e:	d00d      	beq.n	8005f7c <HAL_TIM_ConfigClockSource+0x8c>
 8005f60:	2b70      	cmp	r3, #112	; 0x70
 8005f62:	d804      	bhi.n	8005f6e <HAL_TIM_ConfigClockSource+0x7e>
 8005f64:	2b50      	cmp	r3, #80	; 0x50
 8005f66:	d033      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0xe0>
 8005f68:	2b60      	cmp	r3, #96	; 0x60
 8005f6a:	d041      	beq.n	8005ff0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005f6c:	e06a      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f72:	d066      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x152>
 8005f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f78:	d017      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f7a:	e063      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	6899      	ldr	r1, [r3, #8]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f000 fcc8 	bl	8006920 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	609a      	str	r2, [r3, #8]
      break;
 8005fa8:	e04c      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6899      	ldr	r1, [r3, #8]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f000 fcb1 	bl	8006920 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fcc:	609a      	str	r2, [r3, #8]
      break;
 8005fce:	e039      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6859      	ldr	r1, [r3, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f000 fb6f 	bl	80066c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2150      	movs	r1, #80	; 0x50
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fc7e 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 8005fee:	e029      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6859      	ldr	r1, [r3, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f000 fbcb 	bl	8006798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2160      	movs	r1, #96	; 0x60
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fc6e 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 800600e:	e019      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6859      	ldr	r1, [r3, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	461a      	mov	r2, r3
 800601e:	f000 fb4f 	bl	80066c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2140      	movs	r1, #64	; 0x40
 8006028:	4618      	mov	r0, r3
 800602a:	f000 fc5e 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 800602e:	e009      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f000 fc55 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 8006040:	e000      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b0c      	cmp	r3, #12
 8006072:	d831      	bhi.n	80060d8 <HAL_TIM_ReadCapturedValue+0x78>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060d9 	.word	0x080060d9
 8006084:	080060d9 	.word	0x080060d9
 8006088:	080060d9 	.word	0x080060d9
 800608c:	080060bb 	.word	0x080060bb
 8006090:	080060d9 	.word	0x080060d9
 8006094:	080060d9 	.word	0x080060d9
 8006098:	080060d9 	.word	0x080060d9
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060d9 	.word	0x080060d9
 80060a4:	080060d9 	.word	0x080060d9
 80060a8:	080060d9 	.word	0x080060d9
 80060ac:	080060cf 	.word	0x080060cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b6:	60fb      	str	r3, [r7, #12]

      break;
 80060b8:	e00f      	b.n	80060da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	60fb      	str	r3, [r7, #12]

      break;
 80060c2:	e00a      	b.n	80060da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	60fb      	str	r3, [r7, #12]

      break;
 80060cc:	e005      	b.n	80060da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	60fb      	str	r3, [r7, #12]

      break;
 80060d6:	e000      	b.n	80060da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80060d8:	bf00      	nop
  }

  return tmpreg;
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a40      	ldr	r2, [pc, #256]	; (800624c <TIM_Base_SetConfig+0x114>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <TIM_Base_SetConfig+0x40>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006156:	d00f      	beq.n	8006178 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a3d      	ldr	r2, [pc, #244]	; (8006250 <TIM_Base_SetConfig+0x118>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00b      	beq.n	8006178 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3c      	ldr	r2, [pc, #240]	; (8006254 <TIM_Base_SetConfig+0x11c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d007      	beq.n	8006178 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3b      	ldr	r2, [pc, #236]	; (8006258 <TIM_Base_SetConfig+0x120>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a3a      	ldr	r2, [pc, #232]	; (800625c <TIM_Base_SetConfig+0x124>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d108      	bne.n	800618a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2f      	ldr	r2, [pc, #188]	; (800624c <TIM_Base_SetConfig+0x114>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d02b      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006198:	d027      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2c      	ldr	r2, [pc, #176]	; (8006250 <TIM_Base_SetConfig+0x118>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d023      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2b      	ldr	r2, [pc, #172]	; (8006254 <TIM_Base_SetConfig+0x11c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d01f      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a2a      	ldr	r2, [pc, #168]	; (8006258 <TIM_Base_SetConfig+0x120>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01b      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a29      	ldr	r2, [pc, #164]	; (800625c <TIM_Base_SetConfig+0x124>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d017      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a28      	ldr	r2, [pc, #160]	; (8006260 <TIM_Base_SetConfig+0x128>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d013      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a27      	ldr	r2, [pc, #156]	; (8006264 <TIM_Base_SetConfig+0x12c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00f      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a26      	ldr	r2, [pc, #152]	; (8006268 <TIM_Base_SetConfig+0x130>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00b      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a25      	ldr	r2, [pc, #148]	; (800626c <TIM_Base_SetConfig+0x134>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d007      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a24      	ldr	r2, [pc, #144]	; (8006270 <TIM_Base_SetConfig+0x138>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d003      	beq.n	80061ea <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a23      	ldr	r2, [pc, #140]	; (8006274 <TIM_Base_SetConfig+0x13c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d108      	bne.n	80061fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a0a      	ldr	r2, [pc, #40]	; (800624c <TIM_Base_SetConfig+0x114>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d003      	beq.n	8006230 <TIM_Base_SetConfig+0xf8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a0c      	ldr	r2, [pc, #48]	; (800625c <TIM_Base_SetConfig+0x124>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d103      	bne.n	8006238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	615a      	str	r2, [r3, #20]
}
 800623e:	bf00      	nop
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40010000 	.word	0x40010000
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40010400 	.word	0x40010400
 8006260:	40014000 	.word	0x40014000
 8006264:	40014400 	.word	0x40014400
 8006268:	40014800 	.word	0x40014800
 800626c:	40001800 	.word	0x40001800
 8006270:	40001c00 	.word	0x40001c00
 8006274:	40002000 	.word	0x40002000

08006278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	f023 0201 	bic.w	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 0302 	bic.w	r3, r3, #2
 80062c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a20      	ldr	r2, [pc, #128]	; (8006350 <TIM_OC1_SetConfig+0xd8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_OC1_SetConfig+0x64>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a1f      	ldr	r2, [pc, #124]	; (8006354 <TIM_OC1_SetConfig+0xdc>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d10c      	bne.n	80062f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0308 	bic.w	r3, r3, #8
 80062e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 0304 	bic.w	r3, r3, #4
 80062f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a15      	ldr	r2, [pc, #84]	; (8006350 <TIM_OC1_SetConfig+0xd8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_OC1_SetConfig+0x8e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a14      	ldr	r2, [pc, #80]	; (8006354 <TIM_OC1_SetConfig+0xdc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d111      	bne.n	800632a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800630c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	621a      	str	r2, [r3, #32]
}
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	40010000 	.word	0x40010000
 8006354:	40010400 	.word	0x40010400

08006358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f023 0210 	bic.w	r2, r3, #16
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f023 0320 	bic.w	r3, r3, #32
 80063a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a22      	ldr	r2, [pc, #136]	; (800643c <TIM_OC2_SetConfig+0xe4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_OC2_SetConfig+0x68>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a21      	ldr	r2, [pc, #132]	; (8006440 <TIM_OC2_SetConfig+0xe8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10d      	bne.n	80063dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a17      	ldr	r2, [pc, #92]	; (800643c <TIM_OC2_SetConfig+0xe4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_OC2_SetConfig+0x94>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a16      	ldr	r2, [pc, #88]	; (8006440 <TIM_OC2_SetConfig+0xe8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d113      	bne.n	8006414 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40010000 	.word	0x40010000
 8006440:	40010400 	.word	0x40010400

08006444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0303 	bic.w	r3, r3, #3
 800647a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800648c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a21      	ldr	r2, [pc, #132]	; (8006524 <TIM_OC3_SetConfig+0xe0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d003      	beq.n	80064aa <TIM_OC3_SetConfig+0x66>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a20      	ldr	r2, [pc, #128]	; (8006528 <TIM_OC3_SetConfig+0xe4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d10d      	bne.n	80064c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a16      	ldr	r2, [pc, #88]	; (8006524 <TIM_OC3_SetConfig+0xe0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d003      	beq.n	80064d6 <TIM_OC3_SetConfig+0x92>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a15      	ldr	r2, [pc, #84]	; (8006528 <TIM_OC3_SetConfig+0xe4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d113      	bne.n	80064fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	621a      	str	r2, [r3, #32]
}
 8006518:	bf00      	nop
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	40010000 	.word	0x40010000
 8006528:	40010400 	.word	0x40010400

0800652c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	031b      	lsls	r3, r3, #12
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <TIM_OC4_SetConfig+0xa4>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <TIM_OC4_SetConfig+0x68>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a11      	ldr	r2, [pc, #68]	; (80065d4 <TIM_OC4_SetConfig+0xa8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d109      	bne.n	80065a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800659a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	019b      	lsls	r3, r3, #6
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	621a      	str	r2, [r3, #32]
}
 80065c2:	bf00      	nop
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40010400 	.word	0x40010400

080065d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f023 0201 	bic.w	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4a28      	ldr	r2, [pc, #160]	; (80066a4 <TIM_TI1_SetConfig+0xcc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d01b      	beq.n	800663e <TIM_TI1_SetConfig+0x66>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d017      	beq.n	800663e <TIM_TI1_SetConfig+0x66>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a25      	ldr	r2, [pc, #148]	; (80066a8 <TIM_TI1_SetConfig+0xd0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <TIM_TI1_SetConfig+0x66>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a24      	ldr	r2, [pc, #144]	; (80066ac <TIM_TI1_SetConfig+0xd4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00f      	beq.n	800663e <TIM_TI1_SetConfig+0x66>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4a23      	ldr	r2, [pc, #140]	; (80066b0 <TIM_TI1_SetConfig+0xd8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00b      	beq.n	800663e <TIM_TI1_SetConfig+0x66>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4a22      	ldr	r2, [pc, #136]	; (80066b4 <TIM_TI1_SetConfig+0xdc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d007      	beq.n	800663e <TIM_TI1_SetConfig+0x66>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a21      	ldr	r2, [pc, #132]	; (80066b8 <TIM_TI1_SetConfig+0xe0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_TI1_SetConfig+0x66>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a20      	ldr	r2, [pc, #128]	; (80066bc <TIM_TI1_SetConfig+0xe4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <TIM_TI1_SetConfig+0x6a>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <TIM_TI1_SetConfig+0x6c>
 8006642:	2300      	movs	r3, #0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d008      	beq.n	800665a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0303 	bic.w	r3, r3, #3
 800664e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e003      	b.n	8006662 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	b2db      	uxtb	r3, r3
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f023 030a 	bic.w	r3, r3, #10
 800667c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f003 030a 	and.w	r3, r3, #10
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40010000 	.word	0x40010000
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40000c00 	.word	0x40000c00
 80066b4:	40010400 	.word	0x40010400
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40001800 	.word	0x40001800

080066c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f023 0201 	bic.w	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 030a 	bic.w	r3, r3, #10
 80066fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800671e:	b480      	push	{r7}
 8006720:	b087      	sub	sp, #28
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
 800672a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f023 0210 	bic.w	r2, r3, #16
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800675c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	031b      	lsls	r3, r3, #12
 8006762:	b29b      	uxth	r3, r3
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006770:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f023 0210 	bic.w	r2, r3, #16
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	031b      	lsls	r3, r3, #12
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	621a      	str	r2, [r3, #32]
}
 80067ec:	bf00      	nop
 80067ee:	371c      	adds	r7, #28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f023 0303 	bic.w	r3, r3, #3
 8006824:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006834:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	b2db      	uxtb	r3, r3
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006848:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	031b      	lsls	r3, r3, #12
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	031b      	lsls	r3, r3, #12
 80068c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b085      	sub	sp, #20
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	f043 0307 	orr.w	r3, r3, #7
 800690c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	609a      	str	r2, [r3, #8]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800693a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	021a      	lsls	r2, r3, #8
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	431a      	orrs	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4313      	orrs	r3, r2
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	609a      	str	r2, [r3, #8]
}
 8006954:	bf00      	nop
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f003 031f 	and.w	r3, r3, #31
 8006972:	2201      	movs	r2, #1
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1a      	ldr	r2, [r3, #32]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	43db      	mvns	r3, r3
 8006982:	401a      	ands	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a1a      	ldr	r2, [r3, #32]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	fa01 f303 	lsl.w	r3, r1, r3
 8006998:	431a      	orrs	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
	...

080069ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e05a      	b.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a21      	ldr	r2, [pc, #132]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d022      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a10:	d01d      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1d      	ldr	r2, [pc, #116]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d018      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1a      	ldr	r2, [pc, #104]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00e      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d004      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a15      	ldr	r2, [pc, #84]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d10c      	bne.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40000800 	.word	0x40000800
 8006a94:	40000c00 	.word	0x40000c00
 8006a98:	40010400 	.word	0x40010400
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40001800 	.word	0x40001800

08006aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <__libc_init_array>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4e0d      	ldr	r6, [pc, #52]	; (8006b04 <__libc_init_array+0x38>)
 8006ad0:	4c0d      	ldr	r4, [pc, #52]	; (8006b08 <__libc_init_array+0x3c>)
 8006ad2:	1ba4      	subs	r4, r4, r6
 8006ad4:	10a4      	asrs	r4, r4, #2
 8006ad6:	2500      	movs	r5, #0
 8006ad8:	42a5      	cmp	r5, r4
 8006ada:	d109      	bne.n	8006af0 <__libc_init_array+0x24>
 8006adc:	4e0b      	ldr	r6, [pc, #44]	; (8006b0c <__libc_init_array+0x40>)
 8006ade:	4c0c      	ldr	r4, [pc, #48]	; (8006b10 <__libc_init_array+0x44>)
 8006ae0:	f000 f820 	bl	8006b24 <_init>
 8006ae4:	1ba4      	subs	r4, r4, r6
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	2500      	movs	r5, #0
 8006aea:	42a5      	cmp	r5, r4
 8006aec:	d105      	bne.n	8006afa <__libc_init_array+0x2e>
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006af4:	4798      	blx	r3
 8006af6:	3501      	adds	r5, #1
 8006af8:	e7ee      	b.n	8006ad8 <__libc_init_array+0xc>
 8006afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006afe:	4798      	blx	r3
 8006b00:	3501      	adds	r5, #1
 8006b02:	e7f2      	b.n	8006aea <__libc_init_array+0x1e>
 8006b04:	0800a984 	.word	0x0800a984
 8006b08:	0800a984 	.word	0x0800a984
 8006b0c:	0800a984 	.word	0x0800a984
 8006b10:	0800a988 	.word	0x0800a988

08006b14 <memset>:
 8006b14:	4402      	add	r2, r0
 8006b16:	4603      	mov	r3, r0
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d100      	bne.n	8006b1e <memset+0xa>
 8006b1c:	4770      	bx	lr
 8006b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b22:	e7f9      	b.n	8006b18 <memset+0x4>

08006b24 <_init>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr

08006b30 <_fini>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr
